{"version":3,"sources":["Components/AllRecipes.js"],"names":["useStyles","makeStyles","theme","headingColor","backgroundColor","tableRowHover","StyledTableRow","withStyles","root","TableRow","AllRecipes","classes","useState","setIsItemSelected","liRefs","recipeData","setRecipeData","isMounted","useRef","a","fetch","data","json","results","console","log","useEffect","getAllRecipes","current","handleChange","e","target","checked","orderDirection","setOrderDirection","valueToOrderBy","setValueToOrderBy","descendingComparator","b","orderBy","order","createSortHandler","property","event","isAscending","handleRequestSort","length","className","component","Paper","aria-label","padding","onChange","color","inputProps","align","active","direction","onClick","rowArray","comparator","stabalizedRowArray","map","el","index","sort","sortedRowInformation","recipe","idx","hover","ref","name","moment","last_updated","date","format","cogs","Math","round","cost_price","sale_price","gross_margin","display","flexDirection","label","style","id"],"mappings":"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","file":"static/js/4.08e371bb.chunk.js","sourcesContent":["import React, {useState , useEffect, useRef} from 'react'\r\nimport NothingToDisplay from './NothingToDisplay'\r\nimport { Checkbox, withStyles, makeStyles, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, TableSortLabel} from '@material-ui/core'\r\nimport moment from 'moment'\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nconst useStyles = makeStyles(theme => (\r\n    \r\n    {\r\n            headingColor : {\r\n                backgroundColor :'#94b3f6',\r\n            },\r\n            tableRowHover: {\r\n                \"&:hover\": {\r\n                        backgroundColor: \"#dad9df !important\",\r\n                    }\r\n            }\r\n    }));\r\n\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      '&:nth-of-type(odd)': {\r\n        backgroundColor: '#f4f3f9',\r\n      },\r\n    },\r\n  }))(TableRow);\r\n\r\n\r\n// createSortHandler\r\n\r\n\r\n\r\n\r\nexport default function AllRecipes() {\r\n\r\n    const classes = useStyles()\r\n    const [isChecked, setIsChecked] = useState()\r\n    const [isItemSelected , setIsItemSelected] = useState(false)\r\n    const [disabledData, setDisabledData] = useState([])\r\n    const liRefs = []\r\n\r\n\r\n    const [recipeData, setRecipeData] = useState([])\r\n    const isMounted = useRef(false)\r\n\r\n    async function getAllRecipes(){\r\n        try{\r\n            const data = await fetch('https://beta.eagleowl.in/api/v1/mock/organization/18/outlet/18/recipe/recipes/?page=1')\r\n            const json = await data.json()\r\n            setRecipeData(json.results)\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n        \r\n    }\r\n    \r\n    useEffect(()=>{\r\n        getAllRecipes()\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        if(isMounted.current){\r\n            console.log(recipeData)\r\n        }\r\n        else{\r\n            isMounted.current = true\r\n        }\r\n    },[recipeData])\r\n\r\n    \r\n    const handleChange = (e) => {\r\n        setIsItemSelected(e.target.checked);\r\n      };\r\n\r\n    const handleRowChange = (event) => {\r\n\r\n        setIsItemSelected(event.target.checked);\r\n\r\n    } \r\n\r\n    const [orderDirection, setOrderDirection] = useState('asc')\r\n    const [valueToOrderBy, setValueToOrderBy] = useState('name')\r\n\r\n\r\n    function descendingComparator(a,b, orderBy){\r\n        if(b[orderBy] < a[orderBy]){\r\n            return -1;\r\n        }\r\n        if(b[orderBy] > a[orderBy]){\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getComparator(order,orderBy){\r\n        return order === 'desc'\r\n        ? (a,b) => descendingComparator(a,b, orderBy)\r\n        : (a,b) => -descendingComparator(a,b, orderBy);\r\n    }\r\n    \r\n    const handleRequestSort = (event,property) => {\r\n        const isAscending = valueToOrderBy === property && orderDirection === \"asc\";\r\n        setValueToOrderBy(property);\r\n        setOrderDirection(isAscending ? 'desc' : 'asc');\r\n    }\r\n\r\n    const createSortHandler = (property) => (event) => {\r\n        handleRequestSort(event,property);\r\n    }\r\n\r\n    const sortedRowInformation = (rowArray, comparator) => {\r\n        const stabalizedRowArray = rowArray.map((el,index) => [el,index]);\r\n        stabalizedRowArray.sort((a,b) => {\r\n            const order = comparator(a[0], b[0]);\r\n            if(order !== 0) return order;\r\n            return a[1] - b[1];\r\n        })\r\n        return stabalizedRowArray.map((el) => el[0]);\r\n    }\r\n\r\n    return(\r\n        <>\r\n            {\r\n                (isMounted.current ? (recipeData.length === 0 ? <NothingToDisplay /> :\r\n                    <TableContainer className=\"rounded-0\" component = {Paper}>\r\n                        <Table aria-label = \"all-recipes\">\r\n                            <TableHead>\r\n                                <TableRow className = {classes.headingColor}>\r\n                                    <TableCell className=\"selectCheckbox\" padding=\"checkbox\">\r\n                                    <Checkbox\r\n                                        onChange={handleRowChange}\r\n                                        color=\"primary\"\r\n                                        inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                    />\r\n                                    </TableCell>\r\n                                    <TableCell key=\"name\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"name\"}\r\n                                            direction={valueToOrderBy === \"name\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"name\")}\r\n                                        >\r\n                                            NAME\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"lastUpdated\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"lastUpdated\"}\r\n                                            direction={valueToOrderBy === \"lastUpdated\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"lastUpdated\")}\r\n                                        >\r\n                                            LAST UPDATED\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"cogs\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"cogs\"} \r\n                                            direction={valueToOrderBy === \"cogs\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"cogs\")}\r\n                                        >\r\n                                            COGS\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"costPrice\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"costPrice\"} \r\n                                            direction={valueToOrderBy === \"costPrice\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"costPrice\")}\r\n                                        >\r\n                                            COST PRICE\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"salePrice\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"salePrice\"} \r\n                                            direction={valueToOrderBy === \"salePrice\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"salePrice\")}\r\n                                        >\r\n                                            SALE PRICE\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"grossMargin\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"grossMargin\"} \r\n                                            direction={valueToOrderBy === \"grossMargin\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"grossMargin\")}\r\n                                        >\r\n                                            GROSS MARGIN\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\">TABS / ACTIONS</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    sortedRowInformation(recipeData, getComparator(orderDirection,valueToOrderBy)).map( (recipe,idx) => (\r\n\r\n                                            <StyledTableRow key={recipe.id} hover className={classes.tableRowHover} onClick={handleChange}>\r\n                                                \r\n                                                <TableCell className=\"selectCheckbox\" padding=\"checkbox\">\r\n                                                    <Checkbox\r\n                                                        ref = {ref => (liRefs[idx] = ref)}\r\n                                                        onClick = {handleChange}\r\n                                                        color=\"primary\"\r\n                                                        inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                                        className = \"heyCheckbox\"\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell align=\"left\">{recipe.name}</TableCell>\r\n                                                <TableCell align=\"left\">{moment(recipe.last_updated.date).format(\"MMM Do,YYYY\")}</TableCell>\r\n                                                <TableCell align=\"right\">{recipe.cogs}%</TableCell>\r\n                                                <TableCell align=\"right\">{Math.round(recipe.cost_price)}</TableCell>\r\n                                                <TableCell align=\"right\">{Math.round(recipe.sale_price)}</TableCell>\r\n                                                <TableCell align=\"right\">{Math.round(recipe.gross_margin)}%</TableCell>\r\n                                                <TableCell align=\"left\" display=\"flex\"  flexDirection=\"row\"><Chip label=\"Indian\" className=\"mr-2\" style={{backgroundColor:\"#f4f4d0\"}}/><Chip label=\"Italian\" style={{backgroundColor:\"#f8f4ab\"}}/></TableCell>\r\n                                            </StyledTableRow>\r\n                                    ))\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer> \r\n                ) : null)\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n"],"sourceRoot":""}