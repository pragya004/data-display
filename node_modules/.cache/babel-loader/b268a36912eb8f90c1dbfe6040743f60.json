{"ast":null,"code":"import cloneDeep from 'lodash/cloneDeep';\nimport merge from 'lodash/merge';\nimport { DarkBlueColorTheme } from '../ChartTheme/themes/dark/blue-color-theme';\nimport { DarkCyanColorTheme } from '../ChartTheme/themes/dark/cyan-color-theme';\nimport { DarkGoldColorTheme } from '../ChartTheme/themes/dark/gold-color-theme';\nimport { DarkGrayColorTheme } from '../ChartTheme/themes/dark/gray-color-theme';\nimport { DarkGreenColorTheme } from '../ChartTheme/themes/dark/green-color-theme';\nimport { DarkMultiColorOrderedTheme } from '../ChartTheme/themes/dark/multi-color-ordered-theme';\nimport { DarkMultiColorUnorderedTheme } from '../ChartTheme/themes/dark/multi-color-unordered-theme';\nimport { DarkOrangeColorTheme } from '../ChartTheme/themes/dark/orange-color-theme';\nimport { DarkPurpleColorTheme } from '../ChartTheme/themes/dark/purple-color-theme';\nimport { LightBlueColorTheme } from '../ChartTheme/themes/light/blue-color-theme';\nimport { LightCyanColorTheme } from '../ChartTheme/themes/light/cyan-color-theme';\nimport { LightGoldColorTheme } from '../ChartTheme/themes/light/gold-color-theme';\nimport { LightGrayColorTheme } from '../ChartTheme/themes/light/gray-color-theme';\nimport { LightGreenColorTheme } from '../ChartTheme/themes/light/green-color-theme';\nimport { LightMultiColorOrderedTheme } from '../ChartTheme/themes/light/multi-color-ordered-theme';\nimport { LightMultiColorUnorderedTheme } from '../ChartTheme/themes/light/multi-color-unordered-theme';\nimport { LightOrangeColorTheme } from '../ChartTheme/themes/light/orange-color-theme';\nimport { LightPurpleColorTheme } from '../ChartTheme/themes/light/purple-color-theme';\nimport { ChartAxisTheme, ChartBaseTheme, ChartBulletComparativeErrorMeasureTheme, ChartBulletComparativeMeasureTheme, ChartBulletComparativeWarningMeasureTheme, ChartBulletGroupTitleTheme, ChartBulletPrimaryDotMeasureTheme, ChartBulletPrimaryNegativeMeasureTheme, ChartBulletPrimarySegmentedMeasureTheme, ChartBulletTheme, ChartBulletQualitativeRangeTheme, ChartDonutTheme, ChartDonutUtilizationDynamicTheme, ChartDonutUtilizationStaticTheme, ChartDonutThresholdDynamicTheme, ChartDonutThresholdStaticTheme, ChartThemeColor, ChartThemeVariant, ChartThresholdTheme } from '../ChartTheme/ChartTheme'; // Apply custom properties to base and color themes\n\nexport const getCustomTheme = (themeColor, themeVariant, customTheme) => merge(getTheme(themeColor, themeVariant), customTheme); // Returns axis theme\n\nexport const getAxisTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartAxisTheme); // Returns bullet chart theme\n\nexport const getBulletTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartBulletTheme); // Returns comparative error measure theme for bullet chart\n\nexport const getBulletComparativeErrorMeasureTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartBulletComparativeErrorMeasureTheme); // Returns comparative measure theme for bullet chart\n\nexport const getBulletComparativeMeasureTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartBulletComparativeMeasureTheme); // Returns comparative warning measure theme for bullet chart\n\nexport const getBulletComparativeWarningMeasureTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartBulletComparativeWarningMeasureTheme); // Returns group title theme for bullet chart\n\nexport const getBulletGroupTitleTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartBulletGroupTitleTheme); // Returns primary dot measure theme for bullet chart\n\nexport const getBulletPrimaryDotMeasureTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartBulletPrimaryDotMeasureTheme); // Returns primary negative measure theme for bullet chart\n\nexport const getBulletPrimaryNegativeMeasureTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartBulletPrimaryNegativeMeasureTheme); // Returns primary segmented measure theme for bullet chart\n\nexport const getBulletPrimarySegmentedMeasureTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartBulletPrimarySegmentedMeasureTheme); // Returns qualitative range theme for bullet chart\n\nexport const getBulletQualitativeRangeTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartBulletQualitativeRangeTheme); // Returns donut theme\n\nexport const getDonutTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartDonutTheme); // Returns dynamic donut threshold theme\n\nexport const getDonutThresholdDynamicTheme = (themeColor, themeVariant) => {\n  const theme = getCustomTheme(themeColor, themeVariant, ChartDonutThresholdDynamicTheme); // Merge just the first color of dynamic (blue, green, etc.) with static (grey) for expected colorScale\n\n  theme.legend.colorScale = [theme.pie.colorScale[0], ...ChartDonutThresholdDynamicTheme.legend.colorScale]; // Merge the threshold colors in case users want to show the unused data\n\n  theme.pie.colorScale = [theme.pie.colorScale[0], ...ChartDonutThresholdStaticTheme.pie.colorScale];\n  return theme;\n}; // Returns static donut threshold theme\n\nexport const getDonutThresholdStaticTheme = (themeColor, themeVariant, invert) => {\n  const staticTheme = cloneDeep(ChartDonutThresholdStaticTheme);\n\n  if (invert && staticTheme.pie.colorScale instanceof Array) {\n    staticTheme.pie.colorScale = staticTheme.pie.colorScale.reverse();\n  }\n\n  return getCustomTheme(themeColor, themeVariant, staticTheme);\n}; // Returns donut utilization theme\n\nexport const getDonutUtilizationTheme = (themeColor, themeVariant) => {\n  const theme = getCustomTheme(themeColor, themeVariant, ChartDonutUtilizationDynamicTheme); // Merge just the first color of dynamic (blue, green, etc.) with static (grey) for expected colorScale\n\n  theme.pie.colorScale = [theme.pie.colorScale[0], ...ChartDonutUtilizationStaticTheme.pie.colorScale];\n  theme.legend.colorScale = [theme.legend.colorScale[0], ...ChartDonutUtilizationStaticTheme.legend.colorScale];\n  return theme;\n}; // Returns dark theme colors\n\nexport const getDarkThemeColors = themeColor => {\n  switch (themeColor) {\n    case ChartThemeColor.blue:\n      return DarkBlueColorTheme;\n\n    case ChartThemeColor.cyan:\n      return DarkCyanColorTheme;\n\n    case ChartThemeColor.gold:\n      return DarkGoldColorTheme;\n\n    case ChartThemeColor.gray:\n      return DarkGrayColorTheme;\n\n    case ChartThemeColor.green:\n      return DarkGreenColorTheme;\n\n    case ChartThemeColor.multi:\n    case ChartThemeColor.multiOrdered:\n      return DarkMultiColorOrderedTheme;\n\n    case ChartThemeColor.multiUnordered:\n      return DarkMultiColorUnorderedTheme;\n\n    case ChartThemeColor.orange:\n      return DarkOrangeColorTheme;\n\n    case ChartThemeColor.purple:\n      return DarkPurpleColorTheme;\n\n    default:\n      return DarkBlueColorTheme;\n  }\n}; // Returns light theme colors\n\nexport const getLightThemeColors = themeColor => {\n  switch (themeColor) {\n    case ChartThemeColor.blue:\n      return LightBlueColorTheme;\n\n    case ChartThemeColor.cyan:\n      return LightCyanColorTheme;\n\n    case ChartThemeColor.gold:\n      return LightGoldColorTheme;\n\n    case ChartThemeColor.gray:\n      return LightGrayColorTheme;\n\n    case ChartThemeColor.green:\n      return LightGreenColorTheme;\n\n    case ChartThemeColor.multi:\n    case ChartThemeColor.multiOrdered:\n      return LightMultiColorOrderedTheme;\n\n    case ChartThemeColor.multiUnordered:\n      return LightMultiColorUnorderedTheme;\n\n    case ChartThemeColor.orange:\n      return LightOrangeColorTheme;\n\n    case ChartThemeColor.purple:\n      return LightPurpleColorTheme;\n\n    default:\n      return LightBlueColorTheme;\n  }\n}; // Applies theme color and variant to base theme\n\nexport const getTheme = (themeColor, themeVariant) => {\n  // Deep clone\n  const baseTheme = Object.assign({}, JSON.parse(JSON.stringify(ChartBaseTheme)));\n\n  switch (themeVariant) {\n    case ChartThemeVariant.dark:\n      return merge(baseTheme, getDarkThemeColors(themeColor));\n\n    case ChartThemeVariant.light:\n      return merge(baseTheme, getLightThemeColors(themeColor));\n\n    default:\n      return merge(baseTheme, getLightThemeColors(themeColor));\n  }\n}; // Returns threshold theme\n\nexport const getThresholdTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartThresholdTheme);","map":{"version":3,"sources":["../../../../src/components/ChartUtils/chart-theme.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport merge from 'lodash/merge';\nimport { DarkBlueColorTheme } from '../ChartTheme/themes/dark/blue-color-theme';\nimport { DarkCyanColorTheme } from '../ChartTheme/themes/dark/cyan-color-theme';\nimport { DarkGoldColorTheme } from '../ChartTheme/themes/dark/gold-color-theme';\nimport { DarkGrayColorTheme } from '../ChartTheme/themes/dark/gray-color-theme';\nimport { DarkGreenColorTheme } from '../ChartTheme/themes/dark/green-color-theme';\nimport { DarkMultiColorOrderedTheme } from '../ChartTheme/themes/dark/multi-color-ordered-theme';\nimport { DarkMultiColorUnorderedTheme } from '../ChartTheme/themes/dark/multi-color-unordered-theme';\nimport { DarkOrangeColorTheme } from '../ChartTheme/themes/dark/orange-color-theme';\nimport { DarkPurpleColorTheme } from '../ChartTheme/themes/dark/purple-color-theme';\nimport { LightBlueColorTheme } from '../ChartTheme/themes/light/blue-color-theme';\nimport { LightCyanColorTheme } from '../ChartTheme/themes/light/cyan-color-theme';\nimport { LightGoldColorTheme } from '../ChartTheme/themes/light/gold-color-theme';\nimport { LightGrayColorTheme } from '../ChartTheme/themes/light/gray-color-theme';\nimport { LightGreenColorTheme } from '../ChartTheme/themes/light/green-color-theme';\nimport { LightMultiColorOrderedTheme } from '../ChartTheme/themes/light/multi-color-ordered-theme';\nimport { LightMultiColorUnorderedTheme } from '../ChartTheme/themes/light/multi-color-unordered-theme';\nimport { LightOrangeColorTheme } from '../ChartTheme/themes/light/orange-color-theme';\nimport { LightPurpleColorTheme } from '../ChartTheme/themes/light/purple-color-theme';\nimport { ChartAxisTheme, ChartBaseTheme, ChartBulletComparativeErrorMeasureTheme, ChartBulletComparativeMeasureTheme, ChartBulletComparativeWarningMeasureTheme, ChartBulletGroupTitleTheme, ChartBulletPrimaryDotMeasureTheme, ChartBulletPrimaryNegativeMeasureTheme, ChartBulletPrimarySegmentedMeasureTheme, ChartBulletTheme, ChartBulletQualitativeRangeTheme, ChartDonutTheme, ChartDonutUtilizationDynamicTheme, ChartDonutUtilizationStaticTheme, ChartDonutThresholdDynamicTheme, ChartDonutThresholdStaticTheme, ChartThemeColor, ChartThemeVariant, ChartThresholdTheme } from '../ChartTheme/ChartTheme';\n// Apply custom properties to base and color themes\nexport const getCustomTheme = (themeColor, themeVariant, customTheme) => merge(getTheme(themeColor, themeVariant), customTheme);\n// Returns axis theme\nexport const getAxisTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartAxisTheme);\n// Returns bullet chart theme\nexport const getBulletTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartBulletTheme);\n// Returns comparative error measure theme for bullet chart\nexport const getBulletComparativeErrorMeasureTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartBulletComparativeErrorMeasureTheme);\n// Returns comparative measure theme for bullet chart\nexport const getBulletComparativeMeasureTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartBulletComparativeMeasureTheme);\n// Returns comparative warning measure theme for bullet chart\nexport const getBulletComparativeWarningMeasureTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartBulletComparativeWarningMeasureTheme);\n// Returns group title theme for bullet chart\nexport const getBulletGroupTitleTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartBulletGroupTitleTheme);\n// Returns primary dot measure theme for bullet chart\nexport const getBulletPrimaryDotMeasureTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartBulletPrimaryDotMeasureTheme);\n// Returns primary negative measure theme for bullet chart\nexport const getBulletPrimaryNegativeMeasureTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartBulletPrimaryNegativeMeasureTheme);\n// Returns primary segmented measure theme for bullet chart\nexport const getBulletPrimarySegmentedMeasureTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartBulletPrimarySegmentedMeasureTheme);\n// Returns qualitative range theme for bullet chart\nexport const getBulletQualitativeRangeTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartBulletQualitativeRangeTheme);\n// Returns donut theme\nexport const getDonutTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartDonutTheme);\n// Returns dynamic donut threshold theme\nexport const getDonutThresholdDynamicTheme = (themeColor, themeVariant) => {\n    const theme = getCustomTheme(themeColor, themeVariant, ChartDonutThresholdDynamicTheme);\n    // Merge just the first color of dynamic (blue, green, etc.) with static (grey) for expected colorScale\n    theme.legend.colorScale = [theme.pie.colorScale[0], ...ChartDonutThresholdDynamicTheme.legend.colorScale];\n    // Merge the threshold colors in case users want to show the unused data\n    theme.pie.colorScale = [theme.pie.colorScale[0], ...ChartDonutThresholdStaticTheme.pie.colorScale];\n    return theme;\n};\n// Returns static donut threshold theme\nexport const getDonutThresholdStaticTheme = (themeColor, themeVariant, invert) => {\n    const staticTheme = cloneDeep(ChartDonutThresholdStaticTheme);\n    if (invert && staticTheme.pie.colorScale instanceof Array) {\n        staticTheme.pie.colorScale = staticTheme.pie.colorScale.reverse();\n    }\n    return getCustomTheme(themeColor, themeVariant, staticTheme);\n};\n// Returns donut utilization theme\nexport const getDonutUtilizationTheme = (themeColor, themeVariant) => {\n    const theme = getCustomTheme(themeColor, themeVariant, ChartDonutUtilizationDynamicTheme);\n    // Merge just the first color of dynamic (blue, green, etc.) with static (grey) for expected colorScale\n    theme.pie.colorScale = [theme.pie.colorScale[0], ...ChartDonutUtilizationStaticTheme.pie.colorScale];\n    theme.legend.colorScale = [theme.legend.colorScale[0], ...ChartDonutUtilizationStaticTheme.legend.colorScale];\n    return theme;\n};\n// Returns dark theme colors\nexport const getDarkThemeColors = (themeColor) => {\n    switch (themeColor) {\n        case ChartThemeColor.blue:\n            return DarkBlueColorTheme;\n        case ChartThemeColor.cyan:\n            return DarkCyanColorTheme;\n        case ChartThemeColor.gold:\n            return DarkGoldColorTheme;\n        case ChartThemeColor.gray:\n            return DarkGrayColorTheme;\n        case ChartThemeColor.green:\n            return DarkGreenColorTheme;\n        case ChartThemeColor.multi:\n        case ChartThemeColor.multiOrdered:\n            return DarkMultiColorOrderedTheme;\n        case ChartThemeColor.multiUnordered:\n            return DarkMultiColorUnorderedTheme;\n        case ChartThemeColor.orange:\n            return DarkOrangeColorTheme;\n        case ChartThemeColor.purple:\n            return DarkPurpleColorTheme;\n        default:\n            return DarkBlueColorTheme;\n    }\n};\n// Returns light theme colors\nexport const getLightThemeColors = (themeColor) => {\n    switch (themeColor) {\n        case ChartThemeColor.blue:\n            return LightBlueColorTheme;\n        case ChartThemeColor.cyan:\n            return LightCyanColorTheme;\n        case ChartThemeColor.gold:\n            return LightGoldColorTheme;\n        case ChartThemeColor.gray:\n            return LightGrayColorTheme;\n        case ChartThemeColor.green:\n            return LightGreenColorTheme;\n        case ChartThemeColor.multi:\n        case ChartThemeColor.multiOrdered:\n            return LightMultiColorOrderedTheme;\n        case ChartThemeColor.multiUnordered:\n            return LightMultiColorUnorderedTheme;\n        case ChartThemeColor.orange:\n            return LightOrangeColorTheme;\n        case ChartThemeColor.purple:\n            return LightPurpleColorTheme;\n        default:\n            return LightBlueColorTheme;\n    }\n};\n// Applies theme color and variant to base theme\nexport const getTheme = (themeColor, themeVariant) => {\n    // Deep clone\n    const baseTheme = Object.assign({}, JSON.parse(JSON.stringify(ChartBaseTheme)));\n    switch (themeVariant) {\n        case ChartThemeVariant.dark:\n            return merge(baseTheme, getDarkThemeColors(themeColor));\n        case ChartThemeVariant.light:\n            return merge(baseTheme, getLightThemeColors(themeColor));\n        default:\n            return merge(baseTheme, getLightThemeColors(themeColor));\n    }\n};\n// Returns threshold theme\nexport const getThresholdTheme = (themeColor, themeVariant) => getCustomTheme(themeColor, themeVariant, ChartThresholdTheme);\n//# sourceMappingURL=chart-theme.js.map"]},"metadata":{},"sourceType":"module"}