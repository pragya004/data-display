{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pk\\\\Desktop\\\\interview_practice\\\\eagleowl\\\\src\\\\Components\\\\AllRecipes.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport NothingToDisplay from './NothingToDisplay';\nimport { Checkbox, withStyles, makeStyles, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@material-ui/core';\nimport LazyLoad from 'react-lazyload';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  headingColor: {\n    backgroundColor: '#94b3f6'\n  },\n  tableRowHover: {\n    \"&:hover\": {\n      backgroundColor: \"#dad9df !important\"\n    }\n  }\n}));\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: '#f4f3f9'\n    }\n  }\n}))(TableRow);\nexport default function AllRecipes() {\n  _s();\n\n  const classes = useStyles();\n  const [isChecked, setIsChecked] = useState();\n  const [isItemSelected, setIsItemSelected] = useState(false);\n  const [disabledData, setDisabledData] = useState([]);\n  const liRefs = [];\n  const [recipeData, setRecipeData] = useState([]);\n  const isMounted = useRef(false);\n\n  async function getAllRecipes() {\n    try {\n      const data = await fetch('https://beta.eagleowl.in/api/v1/mock/organization/18/outlet/18/recipe/recipes/?page=1');\n      const json = await data.json();\n      setRecipeData(json.results);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  useEffect(() => {\n    getAllRecipes();\n  }, []);\n  useEffect(() => {\n    if (isMounted.current) {\n      console.log(recipeData);\n    } else {\n      isMounted.current = true;\n    }\n  }, [recipeData]);\n\n  const handleChange = e => {\n    setIsItemSelected(e.target.checked);\n  };\n\n  const handleRowChange = event => {\n    setIsItemSelected(event.target.checked);\n    const check = event.target.checked; // for(var i=0; i<liRefs.length;i++){\n    //     liRefs[i].firstChild.firstChild.checked = true\n    // }\n  };\n\n  const Loading = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post loading\",\n    children: /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isMounted.current ? recipeData.length === 0 ? /*#__PURE__*/_jsxDEV(NothingToDisplay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 65\n    }, this) : /*#__PURE__*/_jsxDEV(TableContainer, {\n      className: \"rounded-0\",\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        \"aria-label\": \"all-recipes\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            className: classes.headingColor,\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              className: \"selectCheckbox\",\n              padding: \"checkbox\",\n              children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                onChange: handleRowChange,\n                color: \"primary\",\n                inputProps: {\n                  'aria-label': 'secondary checkbox'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"NAME\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"LAST UPDATED\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"COGS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"COST PRICE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"SALE PRICE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"GROSS MARGIN\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: recipeData.map((recipe, idx) => /*#__PURE__*/_jsxDEV(LazyLoad, {\n            placeholder: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 80\n            }, this),\n            children: /*#__PURE__*/_jsxDEV(StyledTableRow, {\n              hover: true,\n              className: classes.tableRowHover,\n              onClick: handleChange,\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                className: \"selectCheckbox\",\n                padding: \"checkbox\",\n                children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  ref: ref => liRefs[idx] = ref,\n                  onClick: handleChange,\n                  color: \"primary\",\n                  inputProps: {\n                    'aria-label': 'secondary checkbox'\n                  },\n                  className: \"heyCheckbox\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 114,\n                  columnNumber: 53\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: recipe.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: recipe.last_updated.date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: recipe.cogs\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: recipe.cost_price\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: recipe.sale_price\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: recipe.gross_margin\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 49\n              }, this)]\n            }, recipe.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 45\n            }, this)\n          }, recipe.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 41\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }, this) : null\n  }, void 0, false);\n}\n\n_s(AllRecipes, \"dsO6E1xjMFKKanyTQZ7bXHVqoKo=\", false, function () {\n  return [useStyles];\n});\n\n_c = AllRecipes;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllRecipes\");","map":{"version":3,"sources":["C:/Users/pk/Desktop/interview_practice/eagleowl/src/Components/AllRecipes.js"],"names":["React","useState","useEffect","useRef","NothingToDisplay","Checkbox","withStyles","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","LazyLoad","useStyles","theme","headingColor","backgroundColor","tableRowHover","StyledTableRow","root","AllRecipes","classes","isChecked","setIsChecked","isItemSelected","setIsItemSelected","disabledData","setDisabledData","liRefs","recipeData","setRecipeData","isMounted","getAllRecipes","data","fetch","json","results","err","console","log","current","handleChange","e","target","checked","handleRowChange","event","check","Loading","length","map","recipe","idx","ref","name","last_updated","date","cogs","cost_price","sale_price","gross_margin","id"],"mappings":"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","sourcesContent":["import React, {useState,useEffect, useRef} from 'react'\r\nimport NothingToDisplay from './NothingToDisplay'\r\nimport { Checkbox, withStyles, makeStyles, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@material-ui/core'\r\nimport LazyLoad from 'react-lazyload'\r\nconst useStyles = makeStyles(theme => (\r\n    {\r\n            headingColor : {\r\n                backgroundColor :'#94b3f6',\r\n            },\r\n            tableRowHover: {\r\n                \"&:hover\": {\r\n                        backgroundColor: \"#dad9df !important\",\r\n                    }\r\n            }\r\n    }));\r\n\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      '&:nth-of-type(odd)': {\r\n        backgroundColor: '#f4f3f9',\r\n      },\r\n    },\r\n  }))(TableRow);\r\n\r\n\r\nexport default function AllRecipes() {\r\n\r\n    const classes = useStyles()\r\n    const [isChecked, setIsChecked] = useState()\r\n    const [isItemSelected , setIsItemSelected] = useState(false)\r\n    const [disabledData, setDisabledData] = useState([])\r\n    const liRefs = []\r\n\r\n\r\n    const [recipeData, setRecipeData] = useState([])\r\n    const isMounted = useRef(false)\r\n\r\n    async function getAllRecipes(){\r\n        try{\r\n            const data = await fetch('https://beta.eagleowl.in/api/v1/mock/organization/18/outlet/18/recipe/recipes/?page=1')\r\n            const json = await data.json()\r\n            setRecipeData(json.results)\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n        \r\n    }\r\n    \r\n    useEffect(()=>{\r\n        getAllRecipes()\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        if(isMounted.current){\r\n            console.log(recipeData)\r\n        }\r\n        else{\r\n            isMounted.current = true\r\n        }\r\n    },[recipeData])\r\n\r\n    \r\n    const handleChange = (e) => {\r\n        setIsItemSelected(e.target.checked);\r\n      };\r\n\r\n    const handleRowChange = (event) => {\r\n\r\n        setIsItemSelected(event.target.checked);\r\n        const check = event.target.checked\r\n\r\n            // for(var i=0; i<liRefs.length;i++){\r\n            //     liRefs[i].firstChild.firstChild.checked = true\r\n            // }\r\n    } \r\n\r\n    const Loading = () => (\r\n        <div className=\"post loading\">\r\n            <h5>Loading...</h5>\r\n        </div>\r\n    )\r\n\r\n    return(\r\n        <>\r\n            {\r\n                (isMounted.current ? (recipeData.length === 0 ? <NothingToDisplay /> :\r\n                    <TableContainer className=\"rounded-0\" component = {Paper}>\r\n                        <Table aria-label = \"all-recipes\">\r\n                            <TableHead>\r\n                                <TableRow className = {classes.headingColor}>\r\n                                    <TableCell className=\"selectCheckbox\" padding=\"checkbox\">\r\n                                    <Checkbox\r\n                                        onChange={handleRowChange}\r\n                                        color=\"primary\"\r\n                                        inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                    />\r\n                                    </TableCell>\r\n                                    <TableCell>NAME</TableCell>\r\n                                    <TableCell>LAST UPDATED</TableCell>\r\n                                    <TableCell>COGS</TableCell>\r\n                                    <TableCell>COST PRICE</TableCell>\r\n                                    <TableCell>SALE PRICE</TableCell>\r\n                                    <TableCell>GROSS MARGIN</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    recipeData.map( (recipe,idx) => (\r\n                                        <LazyLoad key={recipe.id} placeholder={<Loading />}>\r\n                                            <StyledTableRow key={recipe.id} hover className={classes.tableRowHover} onClick={handleChange}>\r\n                                                <TableCell className=\"selectCheckbox\" padding=\"checkbox\">\r\n                                                    <Checkbox\r\n                                                        ref = {ref => (liRefs[idx] = ref)}\r\n                                                        onClick = {handleChange}\r\n                                                        color=\"primary\"\r\n                                                        inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                                        className = \"heyCheckbox\"\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>{recipe.name}</TableCell>\r\n                                                <TableCell>{recipe.last_updated.date}</TableCell>\r\n                                                <TableCell>{recipe.cogs}</TableCell>\r\n                                                <TableCell>{recipe.cost_price}</TableCell>\r\n                                                <TableCell>{recipe.sale_price}</TableCell>\r\n                                                <TableCell>{recipe.gross_margin}</TableCell>\r\n                                            </StyledTableRow>\r\n                                        </LazyLoad>\r\n                                    ))\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer> \r\n                ) : null)\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}