{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { Helpers } from 'victory-core';\nimport { VictoryTooltip } from 'victory-tooltip';\nimport { ChartCursorTooltip } from '../ChartCursorTooltip';\nimport { ChartLegendTooltipContent } from './ChartLegendTooltipContent';\nimport { ChartLegendTooltipStyles } from '../ChartTheme';\nimport { ChartTooltip } from '../ChartTooltip';\nimport { getLegendTooltipDataProps, getLegendTooltipSize, getLegendTooltipVisibleData, getLegendTooltipVisibleText, getTheme } from '../ChartUtils';\nexport const ChartLegendTooltip = _a => {\n  var {\n    activePoints,\n    datum,\n    center = {\n      x: 0,\n      y: 0\n    },\n    flyoutHeight,\n    flyoutWidth,\n    height,\n    isCursorTooltip = true,\n    labelComponent = React.createElement(ChartLegendTooltipContent, null),\n    legendData,\n    text,\n    themeColor,\n    themeVariant,\n    title,\n    width,\n    // destructure last\n    theme = getTheme(themeColor, themeVariant)\n  } = _a,\n      rest = __rest(_a, [\"activePoints\", \"datum\", \"center\", \"flyoutHeight\", \"flyoutWidth\", \"height\", \"isCursorTooltip\", \"labelComponent\", \"legendData\", \"text\", \"themeColor\", \"themeVariant\", \"title\", \"width\", \"theme\"]);\n\n  const pointerLength = theme && theme.tooltip ? Helpers.evaluateProp(theme.tooltip.pointerLength) : 10;\n\n  const legendTooltipProps = () => ({\n    legendData: getLegendTooltipVisibleData({\n      activePoints,\n      legendData,\n      text,\n      theme\n    }),\n    legendProps: getLegendTooltipDataProps(labelComponent.props.legendComponent),\n    text: getLegendTooltipVisibleText({\n      activePoints,\n      legendData,\n      text\n    }),\n    theme\n  }); // Returns flyout height based on legend size\n\n\n  const getFlyoutHeight = ({\n    height\n  }) => {\n    const _flyoutHeight = height + ChartLegendTooltipStyles.flyout.padding;\n\n    return title ? _flyoutHeight : _flyoutHeight - 10;\n  }; // Returns flyout width based on legend size\n\n\n  const getFlyoutWidth = ({\n    width\n  }) => width + ChartLegendTooltipStyles.flyout.padding; // Returns the tooltip content component\n\n\n  const getTooltipContentComponent = props => React.cloneElement(labelComponent, Object.assign({\n    center,\n    flyoutHeight: flyoutHeight || getFlyoutHeight(props),\n    flyoutWidth: flyoutWidth || getFlyoutWidth(props),\n    height,\n    legendData,\n    title,\n    width\n  }, labelComponent.props)); // Returns the tooltip component\n\n\n  const getTooltipComponent = () => {\n    // There must be at least one active, visible item or else this will return zero for height & width.\n    const legendSize = getLegendTooltipSize(legendTooltipProps());\n\n    if (legendSize.height === 0 && legendSize.width === 0) {\n      return null;\n    }\n\n    const _flyoutWidth = getFlyoutWidth(legendSize);\n\n    const tooltipComponent = isCursorTooltip ? React.createElement(ChartCursorTooltip, null) : React.createElement(ChartTooltip, null);\n    return React.cloneElement(tooltipComponent, Object.assign(Object.assign(Object.assign({\n      activePoints,\n      center,\n      datum,\n      flyoutHeight: flyoutHeight || getFlyoutHeight(legendSize),\n      flyoutWidth: flyoutWidth || getFlyoutWidth(legendSize),\n      height,\n      labelComponent: getTooltipContentComponent(legendSize)\n    }, flyoutWidth === undefined && {\n      showPointer: width > _flyoutWidth + center.x + pointerLength || center.x > _flyoutWidth + pointerLength\n    }), {\n      text,\n      theme,\n      width\n    }), rest));\n  };\n\n  return getTooltipComponent();\n};\nChartLegendTooltip.displayName = 'ChartLegendTooltip'; // Note: VictoryTooltip.defaultEvents must be hoisted\n\nhoistNonReactStatics(ChartLegendTooltip, VictoryTooltip);","map":{"version":3,"sources":["../../../../src/components/ChartLegendTooltip/ChartLegendTooltip.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,oBAAP,MAAiC,yBAAjC;AACA,SACE,OADF,QAOO,cAPP;AAQA,SAAS,cAAT,QAA+B,iBAA/B;AACA,SAAS,kBAAT,QAA4D,uBAA5D;AACA,SAAS,yBAAT,QAA0C,6BAA1C;AACA,SAAS,wBAAT,QAA+D,eAA/D;AACA,SAAS,YAAT,QAA6B,iBAA7B;AACA,SACE,yBADF,EAEE,oBAFF,EAGE,2BAHF,EAIE,2BAJF,EAKE,QALF,QAMO,eANP;AAkTA,OAAO,MAAM,kBAAkB,GAAsD,EAAD,IAmBtD;MAnBuD;AACnF,IAAA,YADmF;AAEnF,IAAA,KAFmF;AAGnF,IAAA,MAAM,GAAG;AAAE,MAAA,CAAC,EAAE,CAAL;AAAQ,MAAA,CAAC,EAAE;AAAX,KAH0E;AAInF,IAAA,YAJmF;AAKnF,IAAA,WALmF;AAMnF,IAAA,MANmF;AAOnF,IAAA,eAAe,GAAG,IAPiE;AAQnF,IAAA,cAAc,GAAG,KAAA,CAAA,aAAA,CAAC,yBAAD,EAA0B,IAA1B,CARkE;AASnF,IAAA,UATmF;AAUnF,IAAA,IAVmF;AAWnF,IAAA,UAXmF;AAYnF,IAAA,YAZmF;AAanF,IAAA,KAbmF;AAcnF,IAAA,KAdmF;AAgBnF;AACA,IAAA,KAAK,GAAG,QAAQ,CAAC,UAAD,EAAa,YAAb;AAjBmE,MAiBzC,E;MACvC,IAAI,GAAA,MAAA,CAAA,EAAA,EAlB4E,CAAA,cAAA,EAAA,OAAA,EAAA,QAAA,EAAA,cAAA,EAAA,aAAA,EAAA,QAAA,EAAA,iBAAA,EAAA,gBAAA,EAAA,YAAA,EAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,CAkB5E,C;;AAEP,QAAM,aAAa,GAAG,KAAK,IAAI,KAAK,CAAC,OAAf,GAAyB,OAAO,CAAC,YAAR,CAAqB,KAAK,CAAC,OAAN,CAAc,aAAnC,CAAzB,GAA6E,EAAnG;;AACA,QAAM,kBAAkB,GAAG,OAAO;AAChC,IAAA,UAAU,EAAE,2BAA2B,CAAC;AAAE,MAAA,YAAF;AAAgB,MAAA,UAAhB;AAA4B,MAAA,IAA5B;AAAkC,MAAA;AAAlC,KAAD,CADP;AAEhC,IAAA,WAAW,EAAE,yBAAyB,CAAC,cAAc,CAAC,KAAf,CAAqB,eAAtB,CAFN;AAGhC,IAAA,IAAI,EAAE,2BAA2B,CAAC;AAAE,MAAA,YAAF;AAAgB,MAAA,UAAhB;AAA4B,MAAA;AAA5B,KAAD,CAHD;AAIhC,IAAA;AAJgC,GAAP,CAA3B,CAF4B,CAS5B;;;AACA,QAAM,eAAe,GAAG,CAAC;AAAE,IAAA;AAAF,GAAD,KAA4B;AAClD,UAAM,aAAa,GAAG,MAAM,GAAG,wBAAwB,CAAC,MAAzB,CAAgC,OAA/D;;AACA,WAAO,KAAK,GAAG,aAAH,GAAmB,aAAa,GAAG,EAA/C;AACD,GAHD,CAV4B,CAe5B;;;AACA,QAAM,cAAc,GAAG,CAAC;AAAE,IAAA;AAAF,GAAD,KAA4B,KAAK,GAAG,wBAAwB,CAAC,MAAzB,CAAgC,OAA3F,CAhB4B,CAkB5B;;;AACA,QAAM,0BAA0B,GAAI,KAAD,IACjC,KAAK,CAAC,YAAN,CAAmB,cAAnB,EAAiC,MAAA,CAAA,MAAA,CAAA;AAC/B,IAAA,MAD+B;AAE/B,IAAA,YAAY,EAAE,YAAY,IAAI,eAAe,CAAC,KAAD,CAFd;AAG/B,IAAA,WAAW,EAAE,WAAW,IAAI,cAAc,CAAC,KAAD,CAHX;AAI/B,IAAA,MAJ+B;AAK/B,IAAA,UAL+B;AAM/B,IAAA,KAN+B;AAO/B,IAAA;AAP+B,GAAA,EAQ5B,cAAc,CAAC,KARa,CAAjC,CADF,CAnB4B,CA+B5B;;;AACA,QAAM,mBAAmB,GAAG,MAAK;AAC/B;AACA,UAAM,UAAU,GAAG,oBAAoB,CAAC,kBAAkB,EAAnB,CAAvC;;AACA,QAAI,UAAU,CAAC,MAAX,KAAsB,CAAtB,IAA2B,UAAU,CAAC,KAAX,KAAqB,CAApD,EAAuD;AACrD,aAAO,IAAP;AACD;;AACD,UAAM,YAAY,GAAG,cAAc,CAAC,UAAD,CAAnC;;AACA,UAAM,gBAAgB,GAAG,eAAe,GAAG,KAAA,CAAA,aAAA,CAAC,kBAAD,EAAmB,IAAnB,CAAH,GAA4B,KAAA,CAAA,aAAA,CAAC,YAAD,EAAa,IAAb,CAApE;AACA,WAAO,KAAK,CAAC,YAAN,CAAmB,gBAAnB,EAAmC,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA;AACxC,MAAA,YADwC;AAExC,MAAA,MAFwC;AAGxC,MAAA,KAHwC;AAIxC,MAAA,YAAY,EAAE,YAAY,IAAI,eAAe,CAAC,UAAD,CAJL;AAKxC,MAAA,WAAW,EAAE,WAAW,IAAI,cAAc,CAAC,UAAD,CALF;AAMxC,MAAA,MANwC;AAOxC,MAAA,cAAc,EAAE,0BAA0B,CAAC,UAAD;AAPF,KAAA,EAQpC,WAAW,KAAK,SAAhB,IAA6B;AAC/B,MAAA,WAAW,EAAE,KAAK,GAAG,YAAY,GAAG,MAAM,CAAC,CAAtB,GAA0B,aAAlC,IAAmD,MAAM,CAAC,CAAP,GAAW,YAAY,GAAG;AAD3D,KARO,CAAA,EAUtC;AACF,MAAA,IADE;AAEF,MAAA,KAFE;AAGF,MAAA;AAHE,KAVsC,CAAA,EAcrC,IAdqC,CAAnC,CAAP;AAgBD,GAxBD;;AA0BA,SAAO,mBAAmB,EAA1B;AACD,CA9EM;AA+EP,kBAAkB,CAAC,WAAnB,GAAiC,oBAAjC,C,CAEA;;AACA,oBAAoB,CAAC,kBAAD,EAAqB,cAArB,CAApB","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { Helpers } from 'victory-core';\nimport { VictoryTooltip } from 'victory-tooltip';\nimport { ChartCursorTooltip } from '../ChartCursorTooltip';\nimport { ChartLegendTooltipContent } from './ChartLegendTooltipContent';\nimport { ChartLegendTooltipStyles } from '../ChartTheme';\nimport { ChartTooltip } from '../ChartTooltip';\nimport { getLegendTooltipDataProps, getLegendTooltipSize, getLegendTooltipVisibleData, getLegendTooltipVisibleText, getTheme } from '../ChartUtils';\nexport const ChartLegendTooltip = (_a) => {\n    var { activePoints, datum, center = { x: 0, y: 0 }, flyoutHeight, flyoutWidth, height, isCursorTooltip = true, labelComponent = React.createElement(ChartLegendTooltipContent, null), legendData, text, themeColor, themeVariant, title, width, \n    // destructure last\n    theme = getTheme(themeColor, themeVariant) } = _a, rest = __rest(_a, [\"activePoints\", \"datum\", \"center\", \"flyoutHeight\", \"flyoutWidth\", \"height\", \"isCursorTooltip\", \"labelComponent\", \"legendData\", \"text\", \"themeColor\", \"themeVariant\", \"title\", \"width\", \"theme\"]);\n    const pointerLength = theme && theme.tooltip ? Helpers.evaluateProp(theme.tooltip.pointerLength) : 10;\n    const legendTooltipProps = () => ({\n        legendData: getLegendTooltipVisibleData({ activePoints, legendData, text, theme }),\n        legendProps: getLegendTooltipDataProps(labelComponent.props.legendComponent),\n        text: getLegendTooltipVisibleText({ activePoints, legendData, text }),\n        theme\n    });\n    // Returns flyout height based on legend size\n    const getFlyoutHeight = ({ height }) => {\n        const _flyoutHeight = height + ChartLegendTooltipStyles.flyout.padding;\n        return title ? _flyoutHeight : _flyoutHeight - 10;\n    };\n    // Returns flyout width based on legend size\n    const getFlyoutWidth = ({ width }) => width + ChartLegendTooltipStyles.flyout.padding;\n    // Returns the tooltip content component\n    const getTooltipContentComponent = (props) => React.cloneElement(labelComponent, Object.assign({ center, flyoutHeight: flyoutHeight || getFlyoutHeight(props), flyoutWidth: flyoutWidth || getFlyoutWidth(props), height,\n        legendData,\n        title,\n        width }, labelComponent.props));\n    // Returns the tooltip component\n    const getTooltipComponent = () => {\n        // There must be at least one active, visible item or else this will return zero for height & width.\n        const legendSize = getLegendTooltipSize(legendTooltipProps());\n        if (legendSize.height === 0 && legendSize.width === 0) {\n            return null;\n        }\n        const _flyoutWidth = getFlyoutWidth(legendSize);\n        const tooltipComponent = isCursorTooltip ? React.createElement(ChartCursorTooltip, null) : React.createElement(ChartTooltip, null);\n        return React.cloneElement(tooltipComponent, Object.assign(Object.assign(Object.assign({ activePoints,\n            center,\n            datum, flyoutHeight: flyoutHeight || getFlyoutHeight(legendSize), flyoutWidth: flyoutWidth || getFlyoutWidth(legendSize), height, labelComponent: getTooltipContentComponent(legendSize) }, (flyoutWidth === undefined && {\n            showPointer: width > _flyoutWidth + center.x + pointerLength || center.x > _flyoutWidth + pointerLength\n        })), { text,\n            theme,\n            width }), rest));\n    };\n    return getTooltipComponent();\n};\nChartLegendTooltip.displayName = 'ChartLegendTooltip';\n// Note: VictoryTooltip.defaultEvents must be hoisted\nhoistNonReactStatics(ChartLegendTooltip, VictoryTooltip);\n//# sourceMappingURL=ChartLegendTooltip.js.map"]},"metadata":{},"sourceType":"module"}