{"ast":null,"code":"import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { VictoryBar } from 'victory-bar';\nimport { getPrimarySegmentedMeasureData } from './utils';\nimport { ChartBar } from '../ChartBar';\nimport { ChartContainer } from '../ChartContainer';\nimport { ChartBulletStyles } from '../ChartTheme';\nimport { ChartTooltip } from '../ChartTooltip';\nimport { getBulletPrimaryNegativeMeasureTheme, getBulletPrimarySegmentedMeasureTheme } from '../ChartUtils';\nexport const ChartBulletPrimarySegmentedMeasure = ({\n  allowTooltip = true,\n  ariaDesc,\n  ariaTitle,\n  barWidth = ChartBulletStyles.primarySegmentedMeasureWidth,\n  constrainToVisibleArea = false,\n  data,\n  domain,\n  horizontal = true,\n  invert = false,\n  labels,\n  measureComponent = React.createElement(ChartBar, null),\n  padding,\n  standalone = true,\n  themeColor,\n  themeVariant,\n  y,\n  y0,\n  // destructure last\n  theme = getBulletPrimarySegmentedMeasureTheme(themeColor, themeVariant),\n  negativeMeasureTheme = getBulletPrimaryNegativeMeasureTheme(themeColor, themeVariant),\n  height = theme.group.height,\n  width = theme.group.width,\n  labelComponent = React.createElement(ChartTooltip, null)\n}) => {\n  const computedData = getPrimarySegmentedMeasureData({\n    data,\n    invert,\n    negativeMeasureTheme,\n    theme,\n    y,\n    y0\n  }); // Label component\n  //\n  // Note: SVG height and width are provided by ChartBullet as a workaround to support constrainToVisibleArea\n\n  const tooltip = React.cloneElement(labelComponent, Object.assign({\n    constrainToVisibleArea,\n    dx: () => {\n      if (horizontal) {\n        return 0;\n      }\n\n      const result = typeof barWidth === 'function' ? barWidth(data) : barWidth;\n      return result / 2;\n    },\n    dy: () => {\n      if (!horizontal) {\n        return 0;\n      }\n\n      const result = typeof barWidth === 'function' ? barWidth(data) : barWidth;\n      return -(result / 2);\n    },\n    orientation: 'top'\n  }, labelComponent.props));\n  const measure = computedData.map((dataPoint, index) => React.cloneElement(measureComponent, Object.assign({\n    barWidth,\n    data: [Object.assign({}, dataPoint)],\n    domain,\n    height,\n    horizontal,\n    key: `pf-chart-bullet-primary-segmented-measure-${index}`,\n    labelComponent: allowTooltip ? tooltip : undefined,\n    labels,\n    padding,\n    standalone: false,\n    style: {\n      data: {\n        fill: dataPoint._color\n      }\n    },\n    theme,\n    width\n  }, measureComponent.props)));\n  return standalone ? React.createElement(ChartContainer, {\n    desc: ariaDesc,\n    height: height,\n    title: ariaTitle,\n    width: width\n  }, measure) : React.createElement(React.Fragment, null, measure);\n};\nChartBulletPrimarySegmentedMeasure.displayName = 'ChartBulletPrimarySegmentedMeasure'; // Note: VictoryBar.role must be hoisted\n\nhoistNonReactStatics(ChartBulletPrimarySegmentedMeasure, VictoryBar);","map":{"version":3,"sources":["../../../../src/components/ChartBullet/ChartBulletPrimarySegmentedMeasure.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { VictoryBar } from 'victory-bar';\nimport { getPrimarySegmentedMeasureData } from './utils';\nimport { ChartBar } from '../ChartBar';\nimport { ChartContainer } from '../ChartContainer';\nimport { ChartBulletStyles } from '../ChartTheme';\nimport { ChartTooltip } from '../ChartTooltip';\nimport { getBulletPrimaryNegativeMeasureTheme, getBulletPrimarySegmentedMeasureTheme } from '../ChartUtils';\nexport const ChartBulletPrimarySegmentedMeasure = ({ allowTooltip = true, ariaDesc, ariaTitle, barWidth = ChartBulletStyles.primarySegmentedMeasureWidth, constrainToVisibleArea = false, data, domain, horizontal = true, invert = false, labels, measureComponent = React.createElement(ChartBar, null), padding, standalone = true, themeColor, themeVariant, y, y0, \n// destructure last\ntheme = getBulletPrimarySegmentedMeasureTheme(themeColor, themeVariant), negativeMeasureTheme = getBulletPrimaryNegativeMeasureTheme(themeColor, themeVariant), height = theme.group.height, width = theme.group.width, labelComponent = React.createElement(ChartTooltip, null) }) => {\n    const computedData = getPrimarySegmentedMeasureData({\n        data,\n        invert,\n        negativeMeasureTheme,\n        theme,\n        y,\n        y0\n    });\n    // Label component\n    //\n    // Note: SVG height and width are provided by ChartBullet as a workaround to support constrainToVisibleArea\n    const tooltip = React.cloneElement(labelComponent, Object.assign({ constrainToVisibleArea, dx: () => {\n            if (horizontal) {\n                return 0;\n            }\n            const result = typeof barWidth === 'function' ? barWidth(data) : barWidth;\n            return result / 2;\n        }, dy: () => {\n            if (!horizontal) {\n                return 0;\n            }\n            const result = typeof barWidth === 'function' ? barWidth(data) : barWidth;\n            return -(result / 2);\n        }, orientation: 'top' }, labelComponent.props));\n    const measure = computedData.map((dataPoint, index) => React.cloneElement(measureComponent, Object.assign({ barWidth, data: [Object.assign({}, dataPoint)], domain,\n        height,\n        horizontal, key: `pf-chart-bullet-primary-segmented-measure-${index}`, labelComponent: allowTooltip ? tooltip : undefined, labels,\n        padding, standalone: false, style: {\n            data: {\n                fill: dataPoint._color\n            }\n        }, theme,\n        width }, measureComponent.props)));\n    return standalone ? (React.createElement(ChartContainer, { desc: ariaDesc, height: height, title: ariaTitle, width: width }, measure)) : (React.createElement(React.Fragment, null, measure));\n};\nChartBulletPrimarySegmentedMeasure.displayName = 'ChartBulletPrimarySegmentedMeasure';\n// Note: VictoryBar.role must be hoisted\nhoistNonReactStatics(ChartBulletPrimarySegmentedMeasure, VictoryBar);\n//# sourceMappingURL=ChartBulletPrimarySegmentedMeasure.js.map"]},"metadata":{},"sourceType":"module"}