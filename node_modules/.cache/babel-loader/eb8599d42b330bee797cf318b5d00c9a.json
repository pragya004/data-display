{"ast":null,"code":"import * as React from 'react';\nimport { createContainer as victoryCreateContainer } from 'victory-create-container';\nimport { ChartCursorTooltip } from '../ChartCursorTooltip';\nimport { ChartLabel } from '../ChartLabel';\n/**\n * Makes a container component with multiple behaviors. It allows you to effectively combine any two\n * containers of type 'brush', 'cursor', 'selection', 'voronoi', or 'zoom'. Default container props are applied to\n * support the PatternFly theme.\n *\n * Each behavior must be one of the following strings: 'brush', 'cursor', 'selection', 'voronoi', and 'zoom'. The\n * resulting container uses the events from both behaviors. For example, if both behaviors use the click event (like\n * zoom and selection) the combined container will trigger both behaviors' events on each click.\n *\n * Note: Order of the behaviors matters in a few cases. It is recommended to use 'zoom' before any other behaviors: for\n * example, createContainer('zoom', 'voronoi') instead of createContainer('voronoi', 'zoom').\n *\n * See https://formidable.com/open-source/victory/docs/create-container\n *\n * @param {string} behaviorA 'brush', 'cursor', 'selection', 'voronoi', or 'zoom'\n * @param {string} behaviorB 'brush', 'cursor', 'selection', 'voronoi', or 'zoom'\n */\n\nexport const createContainer = (behaviorA, behaviorB) => {\n  const container = victoryCreateContainer(behaviorA, behaviorB);\n  const isCursor = behaviorA === 'cursor' || behaviorB === 'cursor';\n  const isVoronoi = behaviorA === 'voronoi' || behaviorB === 'voronoi';\n\n  if (isCursor) {\n    container.defaultProps.cursorLabelComponent = React.createElement(ChartLabel, {\n      textAnchor: \"start\"\n    });\n  }\n\n  if (isVoronoi) {\n    container.defaultProps.labelComponent = React.createElement(ChartCursorTooltip, null);\n  }\n\n  return container;\n};","map":{"version":3,"sources":["../../../../src/components/ChartUtils/chart-container.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAwB,eAAe,IAAI,sBAA3C,QAAyE,0BAAzE;AACA,SAAS,kBAAT,QAAmC,uBAAnC;AACA,SAAS,UAAT,QAA2B,eAA3B;AAEA;;;;;;;;;;;;;;;;AAgBG;;AACH,OAAO,MAAM,eAAe,GAAG,CAAC,SAAD,EAA2B,SAA3B,KAAuD;AACpF,QAAM,SAAS,GAAQ,sBAAsB,CAAC,SAAD,EAAY,SAAZ,CAA7C;AACA,QAAM,QAAQ,GAAG,SAAS,KAAK,QAAd,IAA0B,SAAS,KAAK,QAAzD;AACA,QAAM,SAAS,GAAG,SAAS,KAAK,SAAd,IAA2B,SAAS,KAAK,SAA3D;;AAEA,MAAI,QAAJ,EAAc;AACZ,IAAA,SAAS,CAAC,YAAV,CAAuB,oBAAvB,GAA8C,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AAAC,MAAA,UAAU,EAAC;AAAZ,KAAX,CAA9C;AACD;;AACD,MAAI,SAAJ,EAAe;AACb,IAAA,SAAS,CAAC,YAAV,CAAuB,cAAvB,GAAwC,KAAA,CAAA,aAAA,CAAC,kBAAD,EAAmB,IAAnB,CAAxC;AACD;;AACD,SAAO,SAAP;AACD,CAZM","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { createContainer as victoryCreateContainer } from 'victory-create-container';\nimport { ChartCursorTooltip } from '../ChartCursorTooltip';\nimport { ChartLabel } from '../ChartLabel';\n/**\n * Makes a container component with multiple behaviors. It allows you to effectively combine any two\n * containers of type 'brush', 'cursor', 'selection', 'voronoi', or 'zoom'. Default container props are applied to\n * support the PatternFly theme.\n *\n * Each behavior must be one of the following strings: 'brush', 'cursor', 'selection', 'voronoi', and 'zoom'. The\n * resulting container uses the events from both behaviors. For example, if both behaviors use the click event (like\n * zoom and selection) the combined container will trigger both behaviors' events on each click.\n *\n * Note: Order of the behaviors matters in a few cases. It is recommended to use 'zoom' before any other behaviors: for\n * example, createContainer('zoom', 'voronoi') instead of createContainer('voronoi', 'zoom').\n *\n * See https://formidable.com/open-source/victory/docs/create-container\n *\n * @param {string} behaviorA 'brush', 'cursor', 'selection', 'voronoi', or 'zoom'\n * @param {string} behaviorB 'brush', 'cursor', 'selection', 'voronoi', or 'zoom'\n */\nexport const createContainer = (behaviorA, behaviorB) => {\n    const container = victoryCreateContainer(behaviorA, behaviorB);\n    const isCursor = behaviorA === 'cursor' || behaviorB === 'cursor';\n    const isVoronoi = behaviorA === 'voronoi' || behaviorB === 'voronoi';\n    if (isCursor) {\n        container.defaultProps.cursorLabelComponent = React.createElement(ChartLabel, { textAnchor: \"start\" });\n    }\n    if (isVoronoi) {\n        container.defaultProps.labelComponent = React.createElement(ChartCursorTooltip, null);\n    }\n    return container;\n};\n//# sourceMappingURL=chart-container.js.map"]},"metadata":{},"sourceType":"module"}