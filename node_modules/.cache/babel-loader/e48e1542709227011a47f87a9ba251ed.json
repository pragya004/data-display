{"ast":null,"code":"import { Data } from 'victory-core';\nimport { getBulletComparativeErrorMeasureTheme, getBulletComparativeMeasureTheme, getBulletComparativeWarningMeasureTheme, getBulletPrimaryDotMeasureTheme, getBulletPrimaryNegativeMeasureTheme, getBulletPrimarySegmentedMeasureTheme, getBulletQualitativeRangeTheme } from '../../ChartUtils';\nexport const getComparativeMeasureData = ({\n  data,\n  themeColor,\n  themeVariant,\n  // destructure last\n  theme = getBulletComparativeMeasureTheme(themeColor, themeVariant),\n  y\n}) => {\n  const datum = [];\n  Data.formatData(data, {\n    y\n  }, ['y']).forEach((dataPoint, index) => {\n    datum.push(Object.assign(Object.assign({}, dataPoint), {\n      _index: index // Save to sync legend color\n\n    }));\n  });\n  const computedData = datum.map(dataPoint => Object.assign(Object.assign({}, dataPoint), {\n    x: 1,\n    _x: 1,\n    y0: dataPoint._y,\n    _y0: dataPoint._y,\n    _color: theme.bar.style.data.fill // Save to sync legend color\n\n  }));\n  return computedData;\n};\nexport const getComparativeErrorMeasureData = ({\n  data,\n  themeColor,\n  themeVariant,\n  // destructure last\n  theme = getBulletComparativeErrorMeasureTheme(themeColor, themeVariant),\n  y\n}) => getComparativeMeasureData({\n  data,\n  theme,\n  themeColor,\n  themeVariant,\n  y\n});\nexport const getComparativeWarningMeasureData = ({\n  data,\n  themeColor,\n  themeVariant,\n  // destructure last\n  theme = getBulletComparativeWarningMeasureTheme(themeColor, themeVariant),\n  y\n}) => getComparativeMeasureData({\n  data,\n  theme,\n  themeColor,\n  themeVariant,\n  y\n});\nexport const getPrimaryDotMeasureData = ({\n  data,\n  invert,\n  themeColor,\n  themeVariant,\n  // destructure last\n  theme = getBulletPrimaryDotMeasureTheme(themeColor, themeVariant),\n  y,\n  y0\n}) => getComparativeMeasureData({\n  data,\n  invert,\n  theme,\n  themeColor,\n  themeVariant,\n  y,\n  y0\n});\nexport const getPrimarySegmentedMeasureData = ({\n  data,\n  invert,\n  themeColor,\n  themeVariant,\n  // destructure last\n  theme = getBulletPrimarySegmentedMeasureTheme(themeColor, themeVariant),\n  negativeMeasureTheme = getBulletPrimaryNegativeMeasureTheme(themeColor, themeVariant),\n  y,\n  y0\n}) => {\n  const negativeDatum = [];\n  const positiveDatum = [];\n  Data.formatData(data, {\n    y,\n    y0\n  }, ['y', 'y0']).forEach((dataPoint, index) => {\n    if (dataPoint._y < 0) {\n      negativeDatum.push(Object.assign(Object.assign({}, dataPoint), {\n        _index: index // Save to sync legend color\n\n      }));\n    } else {\n      positiveDatum.push(Object.assign(Object.assign({}, dataPoint), {\n        _index: index // Save to sync legend color\n\n      }));\n    }\n  }); // Instead of relying on colorScale, colors must be added to each measure in ascending order\n\n  const negativeComputedData = negativeDatum.sort((a, b) => b._y - a._y).map((dataPoint, index) => Object.assign(Object.assign({}, dataPoint), {\n    x: 1,\n    _x: 1,\n    _color: invert ? theme.group.colorScale[index % theme.group.colorScale.length] : negativeMeasureTheme.group.colorScale[index % theme.group.colorScale.length]\n  }) // Sort descending so largest bar is appears behind others\n  ).reverse(); // Instead of relying on colorScale, colors must be added to each measure in ascending order\n\n  const positiveComputedData = positiveDatum.sort((a, b) => a._y - b._y).map((dataPoint, index) => Object.assign(Object.assign({}, dataPoint), {\n    x: 1,\n    _x: 1,\n    _color: invert ? negativeMeasureTheme.group.colorScale[index % theme.group.colorScale.length] : theme.group.colorScale[index % theme.group.colorScale.length]\n  }) // Sort descending so largest bar is appears behind others\n  ).reverse();\n  return [...negativeComputedData, ...positiveComputedData];\n};\nexport const getQualitativeRangeData = ({\n  data,\n  invert,\n  themeColor,\n  themeVariant,\n  // destructure last\n  theme = getBulletQualitativeRangeTheme(themeColor, themeVariant),\n  y,\n  y0\n}) => {\n  const datum = [];\n  Data.formatData(data, {\n    y,\n    y0\n  }, ['y', 'y0']).forEach((dataPoint, index) => {\n    datum.push(Object.assign(Object.assign({}, dataPoint), {\n      _index: index // Save to sync legend color\n\n    }));\n  });\n  const computedData = datum.sort((a, b) => invert ? b._y - a._y : a._y - b._y).map((dataPoint, index) => Object.assign(Object.assign({}, dataPoint), {\n    x: 1,\n    _x: 1,\n    // Instead of relying on colorScale, colors must be added to each measure in ascending order\n    _color: theme.group.colorScale[index % theme.group.colorScale.length]\n  }) // Sort descending so largest bar is appears behind others\n  ).reverse();\n  return computedData;\n};","map":{"version":3,"sources":["../../../../../src/components/ChartBullet/utils/chart-bullet-data.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Data } from 'victory-core';\nimport { getBulletComparativeErrorMeasureTheme, getBulletComparativeMeasureTheme, getBulletComparativeWarningMeasureTheme, getBulletPrimaryDotMeasureTheme, getBulletPrimaryNegativeMeasureTheme, getBulletPrimarySegmentedMeasureTheme, getBulletQualitativeRangeTheme } from '../../ChartUtils';\nexport const getComparativeMeasureData = ({ data, themeColor, themeVariant, \n// destructure last\ntheme = getBulletComparativeMeasureTheme(themeColor, themeVariant), y }) => {\n    const datum = [];\n    Data.formatData(data, { y }, ['y']).forEach((dataPoint, index) => {\n        datum.push(Object.assign(Object.assign({}, dataPoint), { _index: index // Save to sync legend color\n         }));\n    });\n    const computedData = datum.map((dataPoint) => (Object.assign(Object.assign({}, dataPoint), { x: 1, _x: 1, y0: dataPoint._y, _y0: dataPoint._y, _color: theme.bar.style.data.fill // Save to sync legend color\n     })));\n    return computedData;\n};\nexport const getComparativeErrorMeasureData = ({ data, themeColor, themeVariant, \n// destructure last\ntheme = getBulletComparativeErrorMeasureTheme(themeColor, themeVariant), y }) => getComparativeMeasureData({\n    data,\n    theme,\n    themeColor,\n    themeVariant,\n    y\n});\nexport const getComparativeWarningMeasureData = ({ data, themeColor, themeVariant, \n// destructure last\ntheme = getBulletComparativeWarningMeasureTheme(themeColor, themeVariant), y }) => getComparativeMeasureData({\n    data,\n    theme,\n    themeColor,\n    themeVariant,\n    y\n});\nexport const getPrimaryDotMeasureData = ({ data, invert, themeColor, themeVariant, \n// destructure last\ntheme = getBulletPrimaryDotMeasureTheme(themeColor, themeVariant), y, y0 }) => getComparativeMeasureData({\n    data,\n    invert,\n    theme,\n    themeColor,\n    themeVariant,\n    y,\n    y0\n});\nexport const getPrimarySegmentedMeasureData = ({ data, invert, themeColor, themeVariant, \n// destructure last\ntheme = getBulletPrimarySegmentedMeasureTheme(themeColor, themeVariant), negativeMeasureTheme = getBulletPrimaryNegativeMeasureTheme(themeColor, themeVariant), y, y0 }) => {\n    const negativeDatum = [];\n    const positiveDatum = [];\n    Data.formatData(data, { y, y0 }, ['y', 'y0']).forEach((dataPoint, index) => {\n        if (dataPoint._y < 0) {\n            negativeDatum.push(Object.assign(Object.assign({}, dataPoint), { _index: index // Save to sync legend color\n             }));\n        }\n        else {\n            positiveDatum.push(Object.assign(Object.assign({}, dataPoint), { _index: index // Save to sync legend color\n             }));\n        }\n    });\n    // Instead of relying on colorScale, colors must be added to each measure in ascending order\n    const negativeComputedData = negativeDatum\n        .sort((a, b) => b._y - a._y)\n        .map((dataPoint, index) => (Object.assign(Object.assign({}, dataPoint), { x: 1, _x: 1, _color: invert\n            ? theme.group.colorScale[index % theme.group.colorScale.length]\n            : negativeMeasureTheme.group.colorScale[index % theme.group.colorScale.length] }))\n    // Sort descending so largest bar is appears behind others\n    )\n        .reverse();\n    // Instead of relying on colorScale, colors must be added to each measure in ascending order\n    const positiveComputedData = positiveDatum\n        .sort((a, b) => a._y - b._y)\n        .map((dataPoint, index) => (Object.assign(Object.assign({}, dataPoint), { x: 1, _x: 1, _color: invert\n            ? negativeMeasureTheme.group.colorScale[index % theme.group.colorScale.length]\n            : theme.group.colorScale[index % theme.group.colorScale.length] }))\n    // Sort descending so largest bar is appears behind others\n    )\n        .reverse();\n    return [...negativeComputedData, ...positiveComputedData];\n};\nexport const getQualitativeRangeData = ({ data, invert, themeColor, themeVariant, \n// destructure last\ntheme = getBulletQualitativeRangeTheme(themeColor, themeVariant), y, y0 }) => {\n    const datum = [];\n    Data.formatData(data, { y, y0 }, ['y', 'y0']).forEach((dataPoint, index) => {\n        datum.push(Object.assign(Object.assign({}, dataPoint), { _index: index // Save to sync legend color\n         }));\n    });\n    const computedData = datum\n        .sort((a, b) => (invert ? b._y - a._y : a._y - b._y))\n        .map((dataPoint, index) => (Object.assign(Object.assign({}, dataPoint), { x: 1, _x: 1, \n        // Instead of relying on colorScale, colors must be added to each measure in ascending order\n        _color: theme.group.colorScale[index % theme.group.colorScale.length] }))\n    // Sort descending so largest bar is appears behind others\n    )\n        .reverse();\n    return computedData;\n};\n//# sourceMappingURL=chart-bullet-data.js.map"]},"metadata":{},"sourceType":"module"}