{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { Helpers } from 'victory-core';\nimport { VictoryTooltip } from 'victory-tooltip';\nimport { ChartLabel } from '../ChartLabel';\nimport { ChartTooltip } from '../ChartTooltip';\nimport { getTheme, getCursorTooltipCenterOffset, getCursorTooltipPoniterOrientation } from '../ChartUtils';\nimport { ChartCursorFlyout } from './ChartCursorFlyout';\nexport const ChartCursorTooltip = _a => {\n  var {\n    constrainToVisibleArea = true,\n    flyoutComponent = React.createElement(ChartCursorFlyout, null),\n    labelComponent = React.createElement(ChartLabel, null),\n    labelTextAnchor = 'start',\n    showPointer = true,\n    style,\n    themeColor,\n    themeVariant,\n    // destructure last\n    theme = getTheme(themeColor, themeVariant),\n    centerOffset = getCursorTooltipCenterOffset({\n      offsetCursorDimensionX: true,\n      theme\n    }),\n    pointerOrientation = getCursorTooltipPoniterOrientation({\n      horizontal: true,\n      theme\n    }),\n    pointerLength = showPointer && theme && theme.tooltip ? theme.tooltip.pointerLength : 0,\n    pointerWidth = theme.tooltip.pointerWidth\n  } = _a,\n      rest = __rest(_a, [\"constrainToVisibleArea\", \"flyoutComponent\", \"labelComponent\", \"labelTextAnchor\", \"showPointer\", \"style\", \"themeColor\", \"themeVariant\", \"theme\", \"centerOffset\", \"pointerOrientation\", \"pointerLength\", \"pointerWidth\"]); // Apply text anchor style\n\n\n  const applyDefaultStyle = customStyle => Object.assign(Object.assign({}, customStyle), {\n    textAnchor: labelTextAnchor // Workaround for VictoryTooltip.getLabelProps referencing the theme style only\n\n  });\n\n  const newStyle = Array.isArray(style) ? style.map(applyDefaultStyle) : applyDefaultStyle(style);\n\n  const getFlyoutComponent = () => {\n    let _pointerLength = Helpers.evaluateProp(pointerLength);\n\n    if (showPointer && _pointerLength === 0) {\n      _pointerLength = theme && theme.tooltip ? Helpers.evaluateProp(theme.tooltip.pointerLength) : 10;\n    }\n\n    return React.cloneElement(flyoutComponent, Object.assign({\n      pointerLength: _pointerLength,\n      pointerWidth\n    }, flyoutComponent.props));\n  };\n\n  return React.createElement(ChartTooltip, Object.assign({\n    centerOffset: centerOffset,\n    constrainToVisibleArea: constrainToVisibleArea,\n    flyoutComponent: getFlyoutComponent(),\n    labelComponent: labelComponent,\n    labelTextAnchor: labelTextAnchor,\n    pointerOrientation: pointerOrientation,\n    style: newStyle,\n    theme: theme\n  }, rest));\n};\nChartCursorTooltip.displayName = 'ChartCursorTooltip'; // Note: VictoryTooltip.defaultEvents must be hoisted\n\nhoistNonReactStatics(ChartCursorTooltip, VictoryTooltip);","map":{"version":3,"sources":["../../../../src/components/ChartCursorTooltip/ChartCursorTooltip.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { Helpers } from 'victory-core';\nimport { VictoryTooltip } from 'victory-tooltip';\nimport { ChartLabel } from '../ChartLabel';\nimport { ChartTooltip } from '../ChartTooltip';\nimport { getTheme, getCursorTooltipCenterOffset, getCursorTooltipPoniterOrientation } from '../ChartUtils';\nimport { ChartCursorFlyout } from './ChartCursorFlyout';\nexport const ChartCursorTooltip = (_a) => {\n    var { constrainToVisibleArea = true, flyoutComponent = React.createElement(ChartCursorFlyout, null), labelComponent = React.createElement(ChartLabel, null), labelTextAnchor = 'start', showPointer = true, style, themeColor, themeVariant, \n    // destructure last\n    theme = getTheme(themeColor, themeVariant), centerOffset = getCursorTooltipCenterOffset({ offsetCursorDimensionX: true, theme }), pointerOrientation = getCursorTooltipPoniterOrientation({ horizontal: true, theme }), pointerLength = showPointer && theme && theme.tooltip ? theme.tooltip.pointerLength : 0, pointerWidth = theme.tooltip.pointerWidth } = _a, rest = __rest(_a, [\"constrainToVisibleArea\", \"flyoutComponent\", \"labelComponent\", \"labelTextAnchor\", \"showPointer\", \"style\", \"themeColor\", \"themeVariant\", \"theme\", \"centerOffset\", \"pointerOrientation\", \"pointerLength\", \"pointerWidth\"]);\n    // Apply text anchor style\n    const applyDefaultStyle = (customStyle) => (Object.assign(Object.assign({}, customStyle), { textAnchor: labelTextAnchor // Workaround for VictoryTooltip.getLabelProps referencing the theme style only\n     }));\n    const newStyle = Array.isArray(style) ? style.map(applyDefaultStyle) : applyDefaultStyle(style);\n    const getFlyoutComponent = () => {\n        let _pointerLength = Helpers.evaluateProp(pointerLength);\n        if (showPointer && _pointerLength === 0) {\n            _pointerLength = theme && theme.tooltip ? Helpers.evaluateProp(theme.tooltip.pointerLength) : 10;\n        }\n        return React.cloneElement(flyoutComponent, Object.assign({ pointerLength: _pointerLength, pointerWidth }, flyoutComponent.props));\n    };\n    return (React.createElement(ChartTooltip, Object.assign({ centerOffset: centerOffset, constrainToVisibleArea: constrainToVisibleArea, flyoutComponent: getFlyoutComponent(), labelComponent: labelComponent, labelTextAnchor: labelTextAnchor, pointerOrientation: pointerOrientation, style: newStyle, theme: theme }, rest)));\n};\nChartCursorTooltip.displayName = 'ChartCursorTooltip';\n// Note: VictoryTooltip.defaultEvents must be hoisted\nhoistNonReactStatics(ChartCursorTooltip, VictoryTooltip);\n//# sourceMappingURL=ChartCursorTooltip.js.map"]},"metadata":{},"sourceType":"module"}