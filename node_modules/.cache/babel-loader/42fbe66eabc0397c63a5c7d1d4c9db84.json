{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { VictoryLine } from 'victory-line';\nimport { ChartLine } from '../ChartLine';\nimport { getThresholdTheme } from '../ChartUtils';\nexport const ChartThreshold = _a => {\n  var {\n    style = {},\n    themeColor,\n    themeVariant,\n    // destructure last\n    theme = getThresholdTheme(themeColor, themeVariant)\n  } = _a,\n      rest = __rest(_a, [\"style\", \"themeColor\", \"themeVariant\", \"theme\"]); // Returned style prop takes precedence over default theme\n\n\n  const getStrokeDasharray = () => {\n    if (style && style.data && style.data.strokeDasharray) {\n      return style.data.strokeDasharray;\n    }\n\n    return getThresholdTheme(themeColor, themeVariant).line.style.data.strokeDasharray;\n  };\n\n  const getStrokeWidth = () => {\n    if (style && style.data && style.data.strokeWidth) {\n      return style.data.strokeWidth;\n    }\n\n    return getThresholdTheme(themeColor, themeVariant).line.style.data.strokeWidth;\n  }; // Clone style and apply strokeDasharray prop\n\n\n  const thresholdStyle = cloneDeep(style);\n\n  if (thresholdStyle.data) {\n    thresholdStyle.data.strokeDasharray = getStrokeDasharray();\n    thresholdStyle.data.strokeWidth = getStrokeWidth();\n  } else {\n    thresholdStyle.data = {\n      strokeDasharray: getStrokeDasharray(),\n      strokeWidth: getStrokeWidth()\n    };\n  }\n\n  return React.createElement(ChartLine, Object.assign({\n    style: thresholdStyle,\n    theme: theme\n  }, rest));\n};\nChartThreshold.displayName = 'ChartThreshold'; // Note: VictoryLine.role must be hoisted\n\nhoistNonReactStatics(ChartThreshold, VictoryLine);","map":{"version":3,"sources":["../../../../src/components/ChartThreshold/ChartThreshold.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,oBAAP,MAAiC,yBAAjC;AACA,OAAO,SAAP,MAAsB,kBAAtB;AAoBA,SAAS,WAAT,QAAsE,cAAtE;AACA,SAAS,SAAT,QAA0B,cAA1B;AAEA,SAAS,iBAAT,QAAkC,eAAlC;AAqZA,OAAO,MAAM,cAAc,GAAkD,EAAD,IAQlD;MARmD;AAC3E,IAAA,KAAK,GAAG,EADmE;AAE3E,IAAA,UAF2E;AAG3E,IAAA,YAH2E;AAK3E;AACA,IAAA,KAAK,GAAG,iBAAiB,CAAC,UAAD,EAAa,YAAb;AANkD,MAMxB,E;MAChD,IAAI,GAAA,MAAA,CAAA,EAAA,EAPoE,CAAA,OAAA,EAAA,YAAA,EAAA,cAAA,EAAA,OAAA,CAOpE,C,CACiB,CACxB;;;AACA,QAAM,kBAAkB,GAAG,MAAK;AAC9B,QAAI,KAAK,IAAI,KAAK,CAAC,IAAf,IAAuB,KAAK,CAAC,IAAN,CAAW,eAAtC,EAAuD;AACrD,aAAO,KAAK,CAAC,IAAN,CAAW,eAAlB;AACD;;AACD,WAAO,iBAAiB,CAAC,UAAD,EAAa,YAAb,CAAjB,CAA4C,IAA5C,CAAiD,KAAjD,CAAuD,IAAvD,CAA4D,eAAnE;AACD,GALD;;AAMA,QAAM,cAAc,GAAG,MAAK;AAC1B,QAAI,KAAK,IAAI,KAAK,CAAC,IAAf,IAAuB,KAAK,CAAC,IAAN,CAAW,WAAtC,EAAmD;AACjD,aAAO,KAAK,CAAC,IAAN,CAAW,WAAlB;AACD;;AACD,WAAO,iBAAiB,CAAC,UAAD,EAAa,YAAb,CAAjB,CAA4C,IAA5C,CAAiD,KAAjD,CAAuD,IAAvD,CAA4D,WAAnE;AACD,GALD,CARwB,CAexB;;;AACA,QAAM,cAAc,GAAG,SAAS,CAAC,KAAD,CAAhC;;AACA,MAAI,cAAc,CAAC,IAAnB,EAAyB;AACvB,IAAA,cAAc,CAAC,IAAf,CAAoB,eAApB,GAAsC,kBAAkB,EAAxD;AACA,IAAA,cAAc,CAAC,IAAf,CAAoB,WAApB,GAAkC,cAAc,EAAhD;AACD,GAHD,MAGO;AACL,IAAA,cAAc,CAAC,IAAf,GAAsB;AACpB,MAAA,eAAe,EAAE,kBAAkB,EADf;AAEpB,MAAA,WAAW,EAAE,cAAc;AAFP,KAAtB;AAID;;AACD,SAAO,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,KAAK,EAAE,cAAR;AAAwB,IAAA,KAAK,EAAE;AAA/B,GAAA,EAA0C,IAA1C,CAAV,CAAP;AACD,CAnCM;AAoCP,cAAc,CAAC,WAAf,GAA6B,gBAA7B,C,CAEA;;AACA,oBAAoB,CAAC,cAAD,EAAiB,WAAjB,CAApB","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { VictoryLine } from 'victory-line';\nimport { ChartLine } from '../ChartLine';\nimport { getThresholdTheme } from '../ChartUtils';\nexport const ChartThreshold = (_a) => {\n    var { style = {}, themeColor, themeVariant, \n    // destructure last\n    theme = getThresholdTheme(themeColor, themeVariant) } = _a, rest = __rest(_a, [\"style\", \"themeColor\", \"themeVariant\", \"theme\"]);\n    // Returned style prop takes precedence over default theme\n    const getStrokeDasharray = () => {\n        if (style && style.data && style.data.strokeDasharray) {\n            return style.data.strokeDasharray;\n        }\n        return getThresholdTheme(themeColor, themeVariant).line.style.data.strokeDasharray;\n    };\n    const getStrokeWidth = () => {\n        if (style && style.data && style.data.strokeWidth) {\n            return style.data.strokeWidth;\n        }\n        return getThresholdTheme(themeColor, themeVariant).line.style.data.strokeWidth;\n    };\n    // Clone style and apply strokeDasharray prop\n    const thresholdStyle = cloneDeep(style);\n    if (thresholdStyle.data) {\n        thresholdStyle.data.strokeDasharray = getStrokeDasharray();\n        thresholdStyle.data.strokeWidth = getStrokeWidth();\n    }\n    else {\n        thresholdStyle.data = {\n            strokeDasharray: getStrokeDasharray(),\n            strokeWidth: getStrokeWidth()\n        };\n    }\n    return React.createElement(ChartLine, Object.assign({ style: thresholdStyle, theme: theme }, rest));\n};\nChartThreshold.displayName = 'ChartThreshold';\n// Note: VictoryLine.role must be hoisted\nhoistNonReactStatics(ChartThreshold, VictoryLine);\n//# sourceMappingURL=ChartThreshold.js.map"]},"metadata":{},"sourceType":"module"}