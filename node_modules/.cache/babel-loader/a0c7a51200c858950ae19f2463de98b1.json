{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport orderBy from 'lodash/orderBy';\nimport { Data } from 'victory-core';\nimport { VictoryPie } from 'victory-pie';\nimport { ChartContainer } from '../ChartContainer';\nimport { ChartDonut } from '../ChartDonut';\nimport { ChartCommonStyles, ChartDonutUtilizationStyles } from '../ChartTheme';\nimport { getDonutUtilizationTheme } from '../ChartUtils';\nexport var ChartDonutUtilizationLabelPosition;\n\n(function (ChartDonutUtilizationLabelPosition) {\n  ChartDonutUtilizationLabelPosition[\"centroid\"] = \"centroid\";\n  ChartDonutUtilizationLabelPosition[\"endAngle\"] = \"endAngle\";\n  ChartDonutUtilizationLabelPosition[\"startAngle\"] = \"startAngle\";\n})(ChartDonutUtilizationLabelPosition || (ChartDonutUtilizationLabelPosition = {}));\n\nexport var ChartDonutUtilizationLegendOrientation;\n\n(function (ChartDonutUtilizationLegendOrientation) {\n  ChartDonutUtilizationLegendOrientation[\"horizontal\"] = \"horizontal\";\n  ChartDonutUtilizationLegendOrientation[\"vertical\"] = \"vertical\";\n})(ChartDonutUtilizationLegendOrientation || (ChartDonutUtilizationLegendOrientation = {}));\n\nexport var ChartDonutUtilizationLegendPosition;\n\n(function (ChartDonutUtilizationLegendPosition) {\n  ChartDonutUtilizationLegendPosition[\"bottom\"] = \"bottom\";\n  ChartDonutUtilizationLegendPosition[\"right\"] = \"right\";\n})(ChartDonutUtilizationLegendPosition || (ChartDonutUtilizationLegendPosition = {}));\n\nexport var ChartDonutUtilizationSortOrder;\n\n(function (ChartDonutUtilizationSortOrder) {\n  ChartDonutUtilizationSortOrder[\"ascending\"] = \"ascending\";\n  ChartDonutUtilizationSortOrder[\"descending\"] = \"descending\";\n})(ChartDonutUtilizationSortOrder || (ChartDonutUtilizationSortOrder = {}));\n\nexport var ChartDonutUtilizationSubTitlePosition;\n\n(function (ChartDonutUtilizationSubTitlePosition) {\n  ChartDonutUtilizationSubTitlePosition[\"bottom\"] = \"bottom\";\n  ChartDonutUtilizationSubTitlePosition[\"center\"] = \"center\";\n  ChartDonutUtilizationSubTitlePosition[\"right\"] = \"right\";\n})(ChartDonutUtilizationSubTitlePosition || (ChartDonutUtilizationSubTitlePosition = {}));\n\nexport const ChartDonutUtilization = _a => {\n  var {\n    allowTooltip = true,\n    ariaDesc,\n    ariaTitle,\n    containerComponent = React.createElement(ChartContainer, null),\n    data,\n    invert = false,\n    legendPosition = ChartCommonStyles.legend.position,\n    padding,\n    showStatic = true,\n    standalone = true,\n    themeColor,\n    themeVariant,\n    thresholds,\n    x,\n    y,\n    // destructure last\n    theme = getDonutUtilizationTheme(themeColor, themeVariant),\n    height = theme.pie.height,\n    width = theme.pie.width\n  } = _a,\n      rest = __rest(_a, [\"allowTooltip\", \"ariaDesc\", \"ariaTitle\", \"containerComponent\", \"data\", \"invert\", \"legendPosition\", \"padding\", \"showStatic\", \"standalone\", \"themeColor\", \"themeVariant\", \"thresholds\", \"x\", \"y\", \"theme\", \"height\", \"width\"]); // Returns computed data representing pie chart slices\n\n\n  const getComputedData = () => {\n    const datum = getData();\n    const computedData = [{\n      x: datum[0]._x,\n      y: datum[0]._y || 0\n    }];\n\n    if (showStatic) {\n      computedData.push({\n        y: datum[0]._x ? Math.abs(100 - datum[0]._y) : 100\n      });\n    }\n\n    return computedData;\n  };\n\n  const getData = () => {\n    const datum = [Object.assign({}, data)];\n    return Data.formatData(datum, Object.assign({\n      x,\n      y\n    }, rest), ['x', 'y']).sort((a, b) => a._y - b._y);\n  }; // Returns thresholds with default color scale\n\n\n  const getDonutThresholds = () => {\n    const result = [];\n\n    if (thresholds) {\n      // Ensure thresholds are in sorted order\n      const sThresholds = orderBy(thresholds, 'value', invert ? 'desc' : 'asc');\n      const numColors = ChartDonutUtilizationStyles.thresholds.colorScale.length;\n\n      for (let i = 0; i < sThresholds.length; i++) {\n        result.push({\n          color: sThresholds[i].color ? sThresholds[i].color : ChartDonutUtilizationStyles.thresholds.colorScale[i % numColors],\n          value: sThresholds[i].value\n        });\n      }\n    }\n\n    return result;\n  }; // Returns theme based on threshold and current value\n\n\n  const getThresholdTheme = () => {\n    const newTheme = Object.assign({}, theme);\n\n    if (data) {\n      const datum = getData();\n      const donutThresholds = getDonutThresholds();\n\n      const mergeThemeProps = i => {\n        // Merge just the first color of dynamic (blue, green, etc.) with static (gray) for expected colorScale\n        if (newTheme.pie.colorScale instanceof Array) {\n          newTheme.pie.colorScale[0] = donutThresholds[i].color;\n        } else {\n          newTheme.pie.colorScale = donutThresholds[i].color;\n        }\n\n        if (newTheme.legend.colorScale instanceof Array) {\n          newTheme.legend.colorScale[0] = donutThresholds[i].color;\n        } else {\n          newTheme.legend.colorScale = donutThresholds[i].color;\n        }\n      };\n\n      for (let i = 0; i < donutThresholds.length; i++) {\n        if (invert) {\n          if (datum[0]._y <= donutThresholds[i].value) {\n            mergeThemeProps(i);\n          }\n        } else {\n          if (datum[0]._y >= donutThresholds[i].value) {\n            mergeThemeProps(i);\n          }\n        }\n      }\n    }\n\n    return newTheme;\n  }; // Dynamic donut chart\n\n\n  const chart = React.createElement(ChartDonut, Object.assign({\n    allowTooltip: allowTooltip,\n    data: getComputedData(),\n    height: height,\n    key: \"pf-chart-donut-utilization\",\n    legendPosition: legendPosition,\n    padding: padding,\n    standalone: false,\n    theme: getThresholdTheme(),\n    width: width\n  }, rest)); // Clone so users can override container props\n\n  const container = React.cloneElement(containerComponent, Object.assign({\n    desc: ariaDesc,\n    height,\n    title: ariaTitle,\n    width,\n    theme\n  }, containerComponent.props), [chart]);\n  return standalone ? React.createElement(React.Fragment, null, container) : React.createElement(React.Fragment, null, chart);\n};\nChartDonutUtilization.displayName = 'ChartDonutUtilization'; // Note: VictoryPie.role must be hoisted\n\nhoistNonReactStatics(ChartDonutUtilization, VictoryPie);","map":{"version":3,"sources":["../../../../src/components/ChartDonutUtilization/ChartDonutUtilization.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport orderBy from 'lodash/orderBy';\nimport { Data } from 'victory-core';\nimport { VictoryPie } from 'victory-pie';\nimport { ChartContainer } from '../ChartContainer';\nimport { ChartDonut } from '../ChartDonut';\nimport { ChartCommonStyles, ChartDonutUtilizationStyles } from '../ChartTheme';\nimport { getDonutUtilizationTheme } from '../ChartUtils';\nexport var ChartDonutUtilizationLabelPosition;\n(function (ChartDonutUtilizationLabelPosition) {\n    ChartDonutUtilizationLabelPosition[\"centroid\"] = \"centroid\";\n    ChartDonutUtilizationLabelPosition[\"endAngle\"] = \"endAngle\";\n    ChartDonutUtilizationLabelPosition[\"startAngle\"] = \"startAngle\";\n})(ChartDonutUtilizationLabelPosition || (ChartDonutUtilizationLabelPosition = {}));\nexport var ChartDonutUtilizationLegendOrientation;\n(function (ChartDonutUtilizationLegendOrientation) {\n    ChartDonutUtilizationLegendOrientation[\"horizontal\"] = \"horizontal\";\n    ChartDonutUtilizationLegendOrientation[\"vertical\"] = \"vertical\";\n})(ChartDonutUtilizationLegendOrientation || (ChartDonutUtilizationLegendOrientation = {}));\nexport var ChartDonutUtilizationLegendPosition;\n(function (ChartDonutUtilizationLegendPosition) {\n    ChartDonutUtilizationLegendPosition[\"bottom\"] = \"bottom\";\n    ChartDonutUtilizationLegendPosition[\"right\"] = \"right\";\n})(ChartDonutUtilizationLegendPosition || (ChartDonutUtilizationLegendPosition = {}));\nexport var ChartDonutUtilizationSortOrder;\n(function (ChartDonutUtilizationSortOrder) {\n    ChartDonutUtilizationSortOrder[\"ascending\"] = \"ascending\";\n    ChartDonutUtilizationSortOrder[\"descending\"] = \"descending\";\n})(ChartDonutUtilizationSortOrder || (ChartDonutUtilizationSortOrder = {}));\nexport var ChartDonutUtilizationSubTitlePosition;\n(function (ChartDonutUtilizationSubTitlePosition) {\n    ChartDonutUtilizationSubTitlePosition[\"bottom\"] = \"bottom\";\n    ChartDonutUtilizationSubTitlePosition[\"center\"] = \"center\";\n    ChartDonutUtilizationSubTitlePosition[\"right\"] = \"right\";\n})(ChartDonutUtilizationSubTitlePosition || (ChartDonutUtilizationSubTitlePosition = {}));\nexport const ChartDonutUtilization = (_a) => {\n    var { allowTooltip = true, ariaDesc, ariaTitle, containerComponent = React.createElement(ChartContainer, null), data, invert = false, legendPosition = ChartCommonStyles.legend.position, padding, showStatic = true, standalone = true, themeColor, themeVariant, thresholds, x, y, \n    // destructure last\n    theme = getDonutUtilizationTheme(themeColor, themeVariant), height = theme.pie.height, width = theme.pie.width } = _a, rest = __rest(_a, [\"allowTooltip\", \"ariaDesc\", \"ariaTitle\", \"containerComponent\", \"data\", \"invert\", \"legendPosition\", \"padding\", \"showStatic\", \"standalone\", \"themeColor\", \"themeVariant\", \"thresholds\", \"x\", \"y\", \"theme\", \"height\", \"width\"]);\n    // Returns computed data representing pie chart slices\n    const getComputedData = () => {\n        const datum = getData();\n        const computedData = [{ x: datum[0]._x, y: datum[0]._y || 0 }];\n        if (showStatic) {\n            computedData.push({ y: datum[0]._x ? Math.abs(100 - datum[0]._y) : 100 });\n        }\n        return computedData;\n    };\n    const getData = () => {\n        const datum = [Object.assign({}, data)];\n        return Data.formatData(datum, Object.assign({ x, y }, rest), ['x', 'y']).sort((a, b) => a._y - b._y);\n    };\n    // Returns thresholds with default color scale\n    const getDonutThresholds = () => {\n        const result = [];\n        if (thresholds) {\n            // Ensure thresholds are in sorted order\n            const sThresholds = orderBy(thresholds, 'value', invert ? 'desc' : 'asc');\n            const numColors = ChartDonutUtilizationStyles.thresholds.colorScale.length;\n            for (let i = 0; i < sThresholds.length; i++) {\n                result.push({\n                    color: sThresholds[i].color\n                        ? sThresholds[i].color\n                        : ChartDonutUtilizationStyles.thresholds.colorScale[i % numColors],\n                    value: sThresholds[i].value\n                });\n            }\n        }\n        return result;\n    };\n    // Returns theme based on threshold and current value\n    const getThresholdTheme = () => {\n        const newTheme = Object.assign({}, theme);\n        if (data) {\n            const datum = getData();\n            const donutThresholds = getDonutThresholds();\n            const mergeThemeProps = (i) => {\n                // Merge just the first color of dynamic (blue, green, etc.) with static (gray) for expected colorScale\n                if (newTheme.pie.colorScale instanceof Array) {\n                    newTheme.pie.colorScale[0] = donutThresholds[i].color;\n                }\n                else {\n                    newTheme.pie.colorScale = donutThresholds[i].color;\n                }\n                if (newTheme.legend.colorScale instanceof Array) {\n                    newTheme.legend.colorScale[0] = donutThresholds[i].color;\n                }\n                else {\n                    newTheme.legend.colorScale = donutThresholds[i].color;\n                }\n            };\n            for (let i = 0; i < donutThresholds.length; i++) {\n                if (invert) {\n                    if (datum[0]._y <= donutThresholds[i].value) {\n                        mergeThemeProps(i);\n                    }\n                }\n                else {\n                    if (datum[0]._y >= donutThresholds[i].value) {\n                        mergeThemeProps(i);\n                    }\n                }\n            }\n        }\n        return newTheme;\n    };\n    // Dynamic donut chart\n    const chart = (React.createElement(ChartDonut, Object.assign({ allowTooltip: allowTooltip, data: getComputedData(), height: height, key: \"pf-chart-donut-utilization\", legendPosition: legendPosition, padding: padding, standalone: false, theme: getThresholdTheme(), width: width }, rest)));\n    // Clone so users can override container props\n    const container = React.cloneElement(containerComponent, Object.assign({ desc: ariaDesc, height, title: ariaTitle, width,\n        theme }, containerComponent.props), [chart]);\n    return standalone ? React.createElement(React.Fragment, null, container) : React.createElement(React.Fragment, null, chart);\n};\nChartDonutUtilization.displayName = 'ChartDonutUtilization';\n// Note: VictoryPie.role must be hoisted\nhoistNonReactStatics(ChartDonutUtilization, VictoryPie);\n//# sourceMappingURL=ChartDonutUtilization.js.map"]},"metadata":{},"sourceType":"module"}