{"ast":null,"code":"/* eslint-disable camelcase */\nimport chart_area_Opacity from \"@patternfly/react-tokens/dist/esm/chart_area_Opacity\";\nimport chart_color_black_500 from \"@patternfly/react-tokens/dist/esm/chart_color_black_500\"; // Returns child names for each series, except given ID index\n\nconst getChildNames = ({\n  chartNames,\n  omitIndex\n}) => {\n  const result = [];\n  chartNames.map((chartName, index) => {\n    if (index !== omitIndex) {\n      if (Array.isArray(chartName)) {\n        chartName.forEach(name => result.push(name));\n      } else {\n        result.push(chartName);\n      }\n    }\n  });\n  return result;\n}; // Returns events for an interactive legend\n\n\nexport const getInteractiveLegendEvents = props => [...getInteractiveLegendTargetEvents(Object.assign(Object.assign({}, props), {\n  target: 'data'\n})), ...getInteractiveLegendTargetEvents(Object.assign(Object.assign({}, props), {\n  target: 'labels'\n}))]; // Returns legend items, except given ID index\n\nconst getInteractiveLegendItems = ({\n  chartNames,\n  omitIndex\n}) => {\n  const result = [];\n  chartNames.map((_, index) => {\n    if (index !== omitIndex) {\n      result.push(index);\n    }\n  });\n  return result;\n}; // Returns styles for interactive legend items\n\n\nexport const getInteractiveLegendItemStyles = (hidden = false) => !hidden ? {} : {\n  labels: {\n    fill: chart_color_black_500.value\n  },\n  symbol: {\n    fill: chart_color_black_500.value,\n    type: 'eyeSlash'\n  }\n}; // Returns targeted events for legend 'data' or 'labels'\n\nconst getInteractiveLegendTargetEvents = ({\n  chartNames,\n  isHidden = () => false,\n  legendName,\n  onLegendClick = () => null,\n  target\n}) => {\n  if (chartNames === undefined || legendName === undefined) {\n    // eslint-disable-next-line no-console\n    console.error('getInteractiveLegendTargetEvents:', 'requires chartNames and legendName to be specified');\n    return [];\n  }\n\n  return chartNames.map((_, index) => {\n    // Get IDs to attach events to, except the IDs associated with this event.\n    //\n    // For example, if the current event key is 0, we need IDs associated with events 1 and 2. If the current event\n    // key is 1, we need IDs associated with events 0 and 2. And so on...\n    const childNames = getChildNames({\n      chartNames,\n      legendName,\n      omitIndex: index\n    });\n    const legendItems = getInteractiveLegendItems({\n      chartNames,\n      legendName,\n      omitIndex: index\n    });\n    return {\n      childName: legendName,\n      target,\n      eventKey: index,\n      eventHandlers: {\n        onClick: () => [{\n          // Hide each data series individually\n          target: 'data',\n          mutation: props => {\n            onLegendClick(props);\n            return null;\n          }\n        }],\n        onMouseOver: () => isHidden(index) ? null : [{\n          // Mute all data series, except the data associated with this event\n          childName: childNames,\n          target: 'data',\n          eventKey: 'all',\n          mutation: props => ({\n            style: Object.assign(Object.assign({}, props.style), {\n              opacity: chart_area_Opacity.value\n            })\n          })\n        }, {\n          // Mute all legend item symbols, except the symbol associated with this event\n          childName: 'legend',\n          target: 'data',\n          eventKey: legendItems,\n          mutation: props => isHidden(props.index) ? null : {\n            // Skip if hidden\n            style: Object.assign(Object.assign({}, props.style), {\n              opacity: chart_area_Opacity.value\n            })\n          }\n        }, {\n          // Mute all legend item labels, except the label associated with this event\n          childName: 'legend',\n          target: 'labels',\n          eventKey: legendItems,\n          mutation: props => {\n            const column = props.datum && props.datum.column ? props.datum.column : 0;\n            return isHidden(column) ? null : {\n              // Skip if hidden\n              style: Object.assign(Object.assign({}, props.style), {\n                opacity: chart_area_Opacity.value\n              })\n            };\n          }\n        }],\n        onMouseOut: () => [{\n          // Restore all data series associated with this event\n          childName: childNames,\n          target: 'data',\n          eventKey: 'all',\n          mutation: () => null\n        }, {\n          // Restore all legend item symbols associated with this event\n          childName: 'legend',\n          target: 'data',\n          eventKey: legendItems,\n          mutation: () => null\n        }, {\n          // Restore all legend item labels associated with this event\n          childName: 'legend',\n          target: 'labels',\n          eventKey: legendItems,\n          mutation: () => null\n        }]\n      }\n    };\n  });\n};","map":{"version":3,"sources":["../../../../src/components/ChartUtils/chart-interactive-legend.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/* eslint-disable camelcase */\nimport chart_area_Opacity from \"@patternfly/react-tokens/dist/esm/chart_area_Opacity\";\nimport chart_color_black_500 from \"@patternfly/react-tokens/dist/esm/chart_color_black_500\";\n// Returns child names for each series, except given ID index\nconst getChildNames = ({ chartNames, omitIndex }) => {\n    const result = [];\n    chartNames.map((chartName, index) => {\n        if (index !== omitIndex) {\n            if (Array.isArray(chartName)) {\n                chartName.forEach(name => result.push(name));\n            }\n            else {\n                result.push(chartName);\n            }\n        }\n    });\n    return result;\n};\n// Returns events for an interactive legend\nexport const getInteractiveLegendEvents = (props) => [\n    ...getInteractiveLegendTargetEvents(Object.assign(Object.assign({}, props), { target: 'data' })),\n    ...getInteractiveLegendTargetEvents(Object.assign(Object.assign({}, props), { target: 'labels' }))\n];\n// Returns legend items, except given ID index\nconst getInteractiveLegendItems = ({ chartNames, omitIndex }) => {\n    const result = [];\n    chartNames.map((_, index) => {\n        if (index !== omitIndex) {\n            result.push(index);\n        }\n    });\n    return result;\n};\n// Returns styles for interactive legend items\nexport const getInteractiveLegendItemStyles = (hidden = false) => !hidden\n    ? {}\n    : {\n        labels: {\n            fill: chart_color_black_500.value\n        },\n        symbol: {\n            fill: chart_color_black_500.value,\n            type: 'eyeSlash'\n        }\n    };\n// Returns targeted events for legend 'data' or 'labels'\nconst getInteractiveLegendTargetEvents = ({ chartNames, isHidden = () => false, legendName, onLegendClick = () => null, target }) => {\n    if (chartNames === undefined || legendName === undefined) {\n        // eslint-disable-next-line no-console\n        console.error('getInteractiveLegendTargetEvents:', 'requires chartNames and legendName to be specified');\n        return [];\n    }\n    return chartNames.map((_, index) => {\n        // Get IDs to attach events to, except the IDs associated with this event.\n        //\n        // For example, if the current event key is 0, we need IDs associated with events 1 and 2. If the current event\n        // key is 1, we need IDs associated with events 0 and 2. And so on...\n        const childNames = getChildNames({ chartNames, legendName, omitIndex: index });\n        const legendItems = getInteractiveLegendItems({ chartNames, legendName, omitIndex: index });\n        return {\n            childName: legendName,\n            target,\n            eventKey: index,\n            eventHandlers: {\n                onClick: () => [\n                    {\n                        // Hide each data series individually\n                        target: 'data',\n                        mutation: (props) => {\n                            onLegendClick(props);\n                            return null;\n                        }\n                    }\n                ],\n                onMouseOver: () => isHidden(index)\n                    ? null\n                    : [\n                        {\n                            // Mute all data series, except the data associated with this event\n                            childName: childNames,\n                            target: 'data',\n                            eventKey: 'all',\n                            mutation: (props) => ({\n                                style: Object.assign(Object.assign({}, props.style), { opacity: chart_area_Opacity.value })\n                            })\n                        },\n                        {\n                            // Mute all legend item symbols, except the symbol associated with this event\n                            childName: 'legend',\n                            target: 'data',\n                            eventKey: legendItems,\n                            mutation: (props) => isHidden(props.index)\n                                ? null\n                                : {\n                                    // Skip if hidden\n                                    style: Object.assign(Object.assign({}, props.style), { opacity: chart_area_Opacity.value })\n                                }\n                        },\n                        {\n                            // Mute all legend item labels, except the label associated with this event\n                            childName: 'legend',\n                            target: 'labels',\n                            eventKey: legendItems,\n                            mutation: (props) => {\n                                const column = props.datum && props.datum.column ? props.datum.column : 0;\n                                return isHidden(column)\n                                    ? null\n                                    : {\n                                        // Skip if hidden\n                                        style: Object.assign(Object.assign({}, props.style), { opacity: chart_area_Opacity.value })\n                                    };\n                            }\n                        }\n                    ],\n                onMouseOut: () => [\n                    {\n                        // Restore all data series associated with this event\n                        childName: childNames,\n                        target: 'data',\n                        eventKey: 'all',\n                        mutation: () => null\n                    },\n                    {\n                        // Restore all legend item symbols associated with this event\n                        childName: 'legend',\n                        target: 'data',\n                        eventKey: legendItems,\n                        mutation: () => null\n                    },\n                    {\n                        // Restore all legend item labels associated with this event\n                        childName: 'legend',\n                        target: 'labels',\n                        eventKey: legendItems,\n                        mutation: () => null\n                    }\n                ]\n            }\n        };\n    });\n};\n//# sourceMappingURL=chart-interactive-legend.js.map"]},"metadata":{},"sourceType":"module"}