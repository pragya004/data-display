{"ast":null,"code":"import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { VictoryScatter } from 'victory-scatter';\nimport { getPrimaryDotMeasureData } from './utils';\nimport { ChartContainer } from '../ChartContainer';\nimport { ChartScatter } from '../ChartScatter';\nimport { ChartBulletStyles } from '../ChartTheme';\nimport { ChartTooltip } from '../ChartTooltip';\nimport { getBulletPrimaryDotMeasureTheme } from '../ChartUtils';\nexport const ChartBulletPrimaryDotMeasure = ({\n  allowTooltip = true,\n  ariaDesc,\n  ariaTitle,\n  constrainToVisibleArea = false,\n  data,\n  domain,\n  horizontal = true,\n  invert = false,\n  labels,\n  measureComponent = React.createElement(ChartScatter, null),\n  padding,\n  size = ChartBulletStyles.primaryDotMeasureSize,\n  standalone = true,\n  themeColor,\n  themeVariant,\n  y,\n  y0,\n  // destructure last\n  theme = getBulletPrimaryDotMeasureTheme(themeColor, themeVariant),\n  labelComponent = React.createElement(ChartTooltip, null),\n  height = theme.group.height,\n  width = theme.group.width\n}) => {\n  const computedData = getPrimaryDotMeasureData({\n    data,\n    invert,\n    theme,\n    y,\n    y0\n  }); // Label component\n  //\n  // Note: SVG height and width are provided by ChartBullet as a workaround to support constrainToVisibleArea\n\n  const tooltip = React.cloneElement(labelComponent, Object.assign({\n    constrainToVisibleArea,\n    dx: 0,\n    dy: horizontal ? -size : 0,\n    orientation: 'top'\n  }, labelComponent.props));\n  const measure = computedData.map((dataPoint, index) => React.cloneElement(measureComponent, Object.assign({\n    data: [Object.assign({}, dataPoint)],\n    domain,\n    height,\n    horizontal,\n    key: `pf-chart-bullet-primary-dot-measure-${index}`,\n    labelComponent: allowTooltip ? tooltip : undefined,\n    labels,\n    padding,\n    size,\n    standalone: false,\n    style: {\n      data: {\n        fill: dataPoint._color\n      }\n    },\n    theme,\n    width\n  }, measureComponent.props)));\n  return standalone ? React.createElement(ChartContainer, {\n    desc: ariaDesc,\n    height: height,\n    title: ariaTitle,\n    width: width\n  }, measure) : React.createElement(React.Fragment, null, measure);\n};\nChartBulletPrimaryDotMeasure.displayName = 'ChartBulletPrimaryDotMeasure'; // Note: VictoryBar.role must be hoisted\n\nhoistNonReactStatics(ChartBulletPrimaryDotMeasure, VictoryScatter);","map":{"version":3,"sources":["../../../../src/components/ChartBullet/ChartBulletPrimaryDotMeasure.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { VictoryScatter } from 'victory-scatter';\nimport { getPrimaryDotMeasureData } from './utils';\nimport { ChartContainer } from '../ChartContainer';\nimport { ChartScatter } from '../ChartScatter';\nimport { ChartBulletStyles } from '../ChartTheme';\nimport { ChartTooltip } from '../ChartTooltip';\nimport { getBulletPrimaryDotMeasureTheme } from '../ChartUtils';\nexport const ChartBulletPrimaryDotMeasure = ({ allowTooltip = true, ariaDesc, ariaTitle, constrainToVisibleArea = false, data, domain, horizontal = true, invert = false, labels, measureComponent = React.createElement(ChartScatter, null), padding, size = ChartBulletStyles.primaryDotMeasureSize, standalone = true, themeColor, themeVariant, y, y0, \n// destructure last\ntheme = getBulletPrimaryDotMeasureTheme(themeColor, themeVariant), labelComponent = React.createElement(ChartTooltip, null), height = theme.group.height, width = theme.group.width }) => {\n    const computedData = getPrimaryDotMeasureData({\n        data,\n        invert,\n        theme,\n        y,\n        y0\n    });\n    // Label component\n    //\n    // Note: SVG height and width are provided by ChartBullet as a workaround to support constrainToVisibleArea\n    const tooltip = React.cloneElement(labelComponent, Object.assign({ constrainToVisibleArea, dx: 0, dy: horizontal ? -size : 0, orientation: 'top' }, labelComponent.props));\n    const measure = computedData.map((dataPoint, index) => React.cloneElement(measureComponent, Object.assign({ data: [Object.assign({}, dataPoint)], domain,\n        height,\n        horizontal, key: `pf-chart-bullet-primary-dot-measure-${index}`, labelComponent: allowTooltip ? tooltip : undefined, labels,\n        padding,\n        size, standalone: false, style: {\n            data: {\n                fill: dataPoint._color\n            }\n        }, theme,\n        width }, measureComponent.props)));\n    return standalone ? (React.createElement(ChartContainer, { desc: ariaDesc, height: height, title: ariaTitle, width: width }, measure)) : (React.createElement(React.Fragment, null, measure));\n};\nChartBulletPrimaryDotMeasure.displayName = 'ChartBulletPrimaryDotMeasure';\n// Note: VictoryBar.role must be hoisted\nhoistNonReactStatics(ChartBulletPrimaryDotMeasure, VictoryScatter);\n//# sourceMappingURL=ChartBulletPrimaryDotMeasure.js.map"]},"metadata":{},"sourceType":"module"}