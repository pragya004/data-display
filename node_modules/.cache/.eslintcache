[{"C:\\Users\\pk\\Desktop\\interview_practice\\eagleowl\\src\\index.js":"1","C:\\Users\\pk\\Desktop\\interview_practice\\eagleowl\\src\\App.js":"2","C:\\Users\\pk\\Desktop\\interview_practice\\eagleowl\\src\\Components\\AllRecipes.js":"3","C:\\Users\\pk\\Desktop\\interview_practice\\eagleowl\\src\\Components\\IsIncorrect.js":"4","C:\\Users\\pk\\Desktop\\interview_practice\\eagleowl\\src\\Components\\NothingToDisplay.js":"5","C:\\Users\\pk\\Desktop\\interview_practice\\eagleowl\\src\\Components\\IsUntagged.js":"6","C:\\Users\\pk\\Desktop\\interview_practice\\eagleowl\\src\\Components\\IsDisabled.js":"7","C:\\Users\\pk\\Desktop\\interview_practice\\eagleowl\\src\\Components\\HighMarginRecipes.js":"8","C:\\Users\\pk\\Desktop\\interview_practice\\eagleowl\\src\\Components\\LowMarginRecipes.js":"9","C:\\Users\\pk\\Desktop\\interview_practice\\eagleowl\\src\\Components\\TopFluctuatingRecipes.js":"10","C:\\Users\\pk\\Desktop\\interview_practice\\eagleowl\\src\\Components\\Loading.js":"11"},{"size":200,"mtime":1613065841339,"results":"12","hashOfConfig":"13"},{"size":4355,"mtime":1613048729400,"results":"14","hashOfConfig":"13"},{"size":10514,"mtime":1613066685752,"results":"15","hashOfConfig":"13"},{"size":10612,"mtime":1613066713050,"results":"16","hashOfConfig":"13"},{"size":235,"mtime":1613039519244,"results":"17","hashOfConfig":"13"},{"size":10599,"mtime":1613066706365,"results":"18","hashOfConfig":"13"},{"size":10535,"mtime":1613066718650,"results":"19","hashOfConfig":"13"},{"size":2211,"mtime":1613066379824,"results":"20","hashOfConfig":"13"},{"size":2123,"mtime":1613066399845,"results":"21","hashOfConfig":"13"},{"size":3919,"mtime":1613068207828,"results":"22","hashOfConfig":"13"},{"size":393,"mtime":1613041738641,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"eka1wj",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\pk\\Desktop\\interview_practice\\eagleowl\\src\\index.js",[],["53","54"],"C:\\Users\\pk\\Desktop\\interview_practice\\eagleowl\\src\\App.js",["55","56"],"import React, {useState, lazy, Suspense} from \"react\"\nimport './App.css';\nimport HighMarginRecipes from \"./Components/HighMarginRecipes\";\nimport LowMarginRecipes from \"./Components/LowMarginRecipes\";\nimport TopFluctuatingRecipes from \"./Components/TopFluctuatingRecipes\";\nimport {Tabs, Tab, Card,Container,Row,Col } from \"react-bootstrap\"\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Loading from \"./Components/Loading\"\n\n\nconst AllRecipes = lazy(() => import(\"./Components/AllRecipes\"))\nconst IsDisabled = lazy(() => import(\"./Components/IsDisabled\"))\nconst IsIncorrect = lazy(() => import(\"./Components/IsIncorrect\"))\nconst IsUntagged = lazy(() => import(\"./Components/IsUntagged\"))\n\n\nfunction App() {\n\n    const [key, setKey] = useState('incorrect');\n\n    return (\n        <>\n            <Container className=\"mt-3\" style={{maxWidth:\"100%\",height:240}}>\n            \n                <Row style={{height:\"100%\"}}>\n                    <Col style={{height:\"100%\"}}>\n                        <Card style={{height:\"100%\"}} className=\"border rounded text-center\">\n                            <Card.Header style={{backgroundColor:\"#f5f3f9\", color:\"#687580\"}}>High Margin Recipes</Card.Header>\n                            <Card.Body className=\"d-flex pb-0\">\n                                <HighMarginRecipes />\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                    <Col style={{height:\"100%\"}}>\n                        <Card  style={{height:\"100%\"}} className=\"text-center border rounded\">\n                            <Card.Header style={{backgroundColor:\"#f5f3f9\", color:\"#687580\"}}>Low Margin Recipes</Card.Header>\n                            <Card.Body className=\"d-flex  pb-0\">\n                                <LowMarginRecipes />\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                    <Col style={{height:\"100%\"}}>\n                        <Card  style={{height:\"100%\"}} className=\"text-center border rounded\">\n                            <Card.Header style={{backgroundColor:\"#f5f3f9\", color:\"#687580\"}}>Top Fluctuating Recipes</Card.Header>\n                            <Card.Body className=\"d-flex pb-0\">\n                                <TopFluctuatingRecipes />\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                </Row>\n                \n            </Container>\n           \n\n            \n            <Tabs className=\"myTabs mt-3 ml-3 mr-3  border border-0\" id=\"controlled-tab-example\" defaultActiveKey=\"allrecipes\">\n                \n                <Tab style={{backgroundColor:\"white\"}} className = \"ml-3 mr-3 border border-0\" eventKey=\"allrecipes\" title=\"ALL RECIPE(S)\">\n                    <Container className=\"pt-4\" style={{maxWidth:\"100%\"}}>\n                        <Suspense fallback={<Loading   />}>\n                            <AllRecipes />\n                        </Suspense> \n                    </Container>\n                </Tab>\n                \n                <Tab style={{backgroundColor:\"white\"}} className = \"ml-3 mr-3 border border-0\" eventKey=\"incorrect\" title=\"INCORRECT\">\n                    <Container className=\"pt-4\" style={{maxWidth:\"100%\"}}>\n                        <Suspense fallback={<Loading   />}>\n                            <IsIncorrect />\n                        </Suspense>\n                    </Container>  \n                </Tab>\n                <Tab style={{backgroundColor:\"white\"}} className = \"ml-3 mr-3 border border-0\" eventKey=\"untagged\" title=\"UNTAGGED\">\n                    <Container className=\"pt-4\" style={{maxWidth:\"100%\"}}>\n                        <Suspense fallback={<Loading   />}>\n                            <IsUntagged />\n                        </Suspense>\n                    </Container>\n                </Tab>\n                <Tab style={{backgroundColor:\"white\"}} className = \"ml-3 mr-3 border border-0\" eventKey=\"disabled\" title=\"DISABLED\">\n                    <Container className=\"pt-4\" style={{maxWidth:\"100%\"}}>\n                        <Suspense fallback={<Loading   />}>\n                            <IsDisabled />\n                        </Suspense>\n                    </Container>\n                </Tab>\n            </Tabs>\n            \n        </>\n    );\n}\n\nexport default App;\n","C:\\Users\\pk\\Desktop\\interview_practice\\eagleowl\\src\\Components\\AllRecipes.js",["57","58","59","60","61"],"import React, {useState , useEffect, useRef} from 'react'\r\nimport NothingToDisplay from './NothingToDisplay'\r\nimport { Checkbox, withStyles, makeStyles, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, TableSortLabel} from '@material-ui/core'\r\nimport moment from 'moment'\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nconst useStyles = makeStyles(theme => (\r\n    \r\n    {\r\n            headingColor : {\r\n                backgroundColor :'#94b3f6',\r\n            },\r\n            tableRowHover: {\r\n                \"&:hover\": {\r\n                        backgroundColor: \"#dad9df !important\",\r\n                    }\r\n            }\r\n    }));\r\n\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      '&:nth-of-type(odd)': {\r\n        backgroundColor: '#f4f3f9',\r\n      },\r\n    },\r\n  }))(TableRow);\r\n\r\n\r\n// createSortHandler\r\n\r\n\r\n\r\n\r\nexport default function AllRecipes() {\r\n\r\n    const classes = useStyles()\r\n    const [isChecked, setIsChecked] = useState()\r\n    const [isItemSelected , setIsItemSelected] = useState(false)\r\n    const [disabledData, setDisabledData] = useState([])\r\n    const liRefs = []\r\n\r\n\r\n    const [recipeData, setRecipeData] = useState([])\r\n    const isMounted = useRef(false)\r\n\r\n    async function getAllRecipes(){\r\n        try{\r\n            const data = await fetch('https://beta.eagleowl.in/api/v1/mock/organization/18/outlet/18/recipe/recipes/?page=1')\r\n            const json = await data.json()\r\n            setRecipeData(json.results)\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n        \r\n    }\r\n    \r\n    useEffect(()=>{\r\n        getAllRecipes()\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        if(isMounted.current){\r\n            console.log(recipeData)\r\n        }\r\n        else{\r\n            isMounted.current = true\r\n        }\r\n    },[recipeData])\r\n\r\n    \r\n    const handleChange = (e) => {\r\n        setIsItemSelected(e.target.checked);\r\n      };\r\n\r\n    const handleRowChange = (event) => {\r\n\r\n        setIsItemSelected(event.target.checked);\r\n\r\n    } \r\n\r\n    const [orderDirection, setOrderDirection] = useState('asc')\r\n    const [valueToOrderBy, setValueToOrderBy] = useState('name')\r\n\r\n\r\n    function descendingComparator(a,b, orderBy){\r\n        if(b[orderBy] < a[orderBy]){\r\n            return -1;\r\n        }\r\n        if(b[orderBy] > a[orderBy]){\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getComparator(order,orderBy){\r\n        return order === 'desc'\r\n        ? (a,b) => descendingComparator(a,b, orderBy)\r\n        : (a,b) => -descendingComparator(a,b, orderBy);\r\n    }\r\n    \r\n    const handleRequestSort = (event,property) => {\r\n        const isAscending = valueToOrderBy === property && orderDirection === \"asc\";\r\n        setValueToOrderBy(property);\r\n        setOrderDirection(isAscending ? 'desc' : 'asc');\r\n    }\r\n\r\n    const createSortHandler = (property) => (event) => {\r\n        handleRequestSort(event,property);\r\n    }\r\n\r\n    const sortedRowInformation = (rowArray, comparator) => {\r\n        const stabalizedRowArray = rowArray.map((el,index) => [el,index]);\r\n        stabalizedRowArray.sort((a,b) => {\r\n            const order = comparator(a[0], b[0]);\r\n            if(order !== 0) return order;\r\n            return a[1] - b[1];\r\n        })\r\n        return stabalizedRowArray.map((el) => el[0]);\r\n    }\r\n\r\n    return(\r\n        <>\r\n            {\r\n                (isMounted.current ? (recipeData.length === 0 ? <NothingToDisplay /> :\r\n                    <TableContainer className=\"rounded-0\" component = {Paper}>\r\n                        <Table aria-label = \"all-recipes\">\r\n                            <TableHead>\r\n                                <TableRow className = {classes.headingColor}>\r\n                                    <TableCell className=\"selectCheckbox\" padding=\"checkbox\">\r\n                                    <Checkbox\r\n                                        onChange={handleRowChange}\r\n                                        color=\"primary\"\r\n                                        inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                    />\r\n                                    </TableCell>\r\n                                    <TableCell key=\"name\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"name\"}\r\n                                            direction={valueToOrderBy === \"name\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"name\")}\r\n                                        >\r\n                                            NAME\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"lastUpdated\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"lastUpdated\"}\r\n                                            direction={valueToOrderBy === \"lastUpdated\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"lastUpdated\")}\r\n                                        >\r\n                                            LAST UPDATED\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"cogs\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"cogs\"} \r\n                                            direction={valueToOrderBy === \"cogs\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"cogs\")}\r\n                                        >\r\n                                            COGS\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"costPrice\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"costPrice\"} \r\n                                            direction={valueToOrderBy === \"costPrice\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"costPrice\")}\r\n                                        >\r\n                                            COST PRICE\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"salePrice\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"salePrice\"} \r\n                                            direction={valueToOrderBy === \"salePrice\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"salePrice\")}\r\n                                        >\r\n                                            SALE PRICE\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"grossMargin\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"grossMargin\"} \r\n                                            direction={valueToOrderBy === \"grossMargin\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"grossMargin\")}\r\n                                        >\r\n                                            GROSS MARGIN\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\">TABS / ACTIONS</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    sortedRowInformation(recipeData, getComparator(orderDirection,valueToOrderBy)).map( (recipe,idx) => (\r\n\r\n                                            <StyledTableRow key={recipe.id} hover className={classes.tableRowHover} onClick={handleChange}>\r\n                                                \r\n                                                <TableCell className=\"selectCheckbox\" padding=\"checkbox\">\r\n                                                    <Checkbox\r\n                                                        ref = {ref => (liRefs[idx] = ref)}\r\n                                                        onClick = {handleChange}\r\n                                                        color=\"primary\"\r\n                                                        inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                                        className = \"heyCheckbox\"\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell align=\"left\">{recipe.name}</TableCell>\r\n                                                <TableCell align=\"left\">{moment(recipe.last_updated.date).format(\"MMM Do,YYYY\")}</TableCell>\r\n                                                <TableCell align=\"right\">{recipe.cogs}%</TableCell>\r\n                                                <TableCell align=\"right\">{Math.round(recipe.cost_price)}</TableCell>\r\n                                                <TableCell align=\"right\">{Math.round(recipe.sale_price)}</TableCell>\r\n                                                <TableCell align=\"right\">{Math.round(recipe.gross_margin)}%</TableCell>\r\n                                                <TableCell align=\"left\" display=\"flex\"  flexDirection=\"row\"><Chip label=\"Indian\" className=\"mr-2\" style={{backgroundColor:\"#f4f4d0\"}}/><Chip label=\"Italian\" style={{backgroundColor:\"#f8f4ab\"}}/></TableCell>\r\n                                            </StyledTableRow>\r\n                                    ))\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer> \r\n                ) : null)\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n","C:\\Users\\pk\\Desktop\\interview_practice\\eagleowl\\src\\Components\\IsIncorrect.js",["62","63","64","65","66","67"],"import React, {useState, useEffect, useRef} from 'react'\r\nimport NothingToDisplay from './NothingToDisplay'\r\nimport { Checkbox, withStyles, makeStyles, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, TableSortLabel } from '@material-ui/core'\r\nimport Chip from '@material-ui/core/Chip';\r\nimport moment from 'moment'\r\n\r\nconst useStyles = makeStyles(theme => (\r\n    {\r\n            headingColor : {\r\n                backgroundColor :'#94b3f6',\r\n            },\r\n            tableRowHover: {\r\n                \"&:hover\": {\r\n                        backgroundColor: \"#dad9df !important\",\r\n                    }\r\n            }\r\n    }));\r\n\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      '&:nth-of-type(odd)': {\r\n        backgroundColor: '#f4f3f9',\r\n      },\r\n    },\r\n  }))(TableRow);\r\n\r\n\r\nexport default function IsIncorrect() {\r\n\r\n    const classes = useStyles()\r\n    const [isChecked, setIsChecked] = useState()\r\n    const [isItemSelected , setIsItemSelected] = useState(false)\r\n    const [disabledData, setDisabledData] = useState([])\r\n    const liRefs = []\r\n\r\n    const [incorrectData, setIncorrectData] = useState([])\r\n    const isMounted = useRef(false)\r\n\r\n\r\n    async function getIncorrectRecipes(){\r\n        try{\r\n            const data = await fetch('https://beta.eagleowl.in/api/v1/mock/organization/18/outlet/18/recipe/recipes/?page=1&is_incorrect=true')\r\n            const json = await data.json()\r\n            setIncorrectData(json.results)\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n        \r\n    }\r\n    \r\n    useEffect(()=>{\r\n        getIncorrectRecipes()\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        if(isMounted.current){\r\n            console.log(incorrectData)\r\n        }\r\n        else{\r\n            isMounted.current = true\r\n        }\r\n    },[incorrectData])\r\n\r\n\r\n    \r\n    const handleChange = (e) => {\r\n        setIsItemSelected(e.target.checked);\r\n      };\r\n\r\n    const handleRowChange = (event) => {\r\n\r\n        setIsItemSelected(event.target.checked);\r\n        const check = event.target.checked\r\n\r\n            // for(var i=0; i<liRefs.length;i++){\r\n            //     liRefs[i].firstChild.firstChild.checked = true\r\n            // }\r\n    } \r\n\r\n    \r\n    const [orderDirection, setOrderDirection] = useState('asc')\r\n    const [valueToOrderBy, setValueToOrderBy] = useState('name')\r\n\r\n\r\n    function descendingComparator(a,b, orderBy){\r\n        if(b[orderBy] < a[orderBy]){\r\n            return -1;\r\n        }\r\n        if(b[orderBy] > a[orderBy]){\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getComparator(order,orderBy){\r\n        return order === 'desc'\r\n        ? (a,b) => descendingComparator(a,b, orderBy)\r\n        : (a,b) => -descendingComparator(a,b, orderBy);\r\n    }\r\n    \r\n    const handleRequestSort = (event,property) => {\r\n        const isAscending = valueToOrderBy === property && orderDirection === \"asc\";\r\n        setValueToOrderBy(property);\r\n        setOrderDirection(isAscending ? 'desc' : 'asc');\r\n    }\r\n\r\n    const createSortHandler = (property) => (event) => {\r\n        handleRequestSort(event,property);\r\n    }\r\n\r\n    const sortedRowInformation = (rowArray, comparator) => {\r\n        const stabalizedRowArray = rowArray.map((el,index) => [el,index]);\r\n        stabalizedRowArray.sort((a,b) => {\r\n            const order = comparator(a[0], b[0]);\r\n            if(order !== 0) return order;\r\n            return a[1] - b[1];\r\n        })\r\n        return stabalizedRowArray.map((el) => el[0]);\r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n            {\r\n                (isMounted.current ? ( incorrectData.length === 0 ? <NothingToDisplay /> :\r\n\r\n                    <TableContainer className=\"rounded-0\" component = {Paper}>\r\n                        <Table aria-label = \"disabled-recipes\">\r\n                            <TableHead>\r\n                                <TableRow className = {classes.headingColor}>\r\n                                    <TableCell className=\"selectCheckbox\" padding=\"checkbox\">\r\n                                    <Checkbox\r\n                                        onChange={handleRowChange}\r\n                                        color=\"primary\"\r\n                                        inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                    />\r\n                                    </TableCell>\r\n                                    <TableCell key=\"name\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"name\"}\r\n                                            direction={valueToOrderBy === \"name\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"name\")}\r\n                                        >\r\n                                            NAME\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"lastUpdated\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"lastUpdated\"}\r\n                                            direction={valueToOrderBy === \"lastUpdated\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"lastUpdated\")}\r\n                                        >\r\n                                            LAST UPDATED\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"cogs\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"cogs\"} \r\n                                            direction={valueToOrderBy === \"cogs\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"cogs\")}\r\n                                        >\r\n                                            COGS\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"costPrice\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"costPrice\"} \r\n                                            direction={valueToOrderBy === \"costPrice\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"costPrice\")}\r\n                                        >\r\n                                            COST PRICE\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"salePrice\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"salePrice\"} \r\n                                            direction={valueToOrderBy === \"salePrice\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"salePrice\")}\r\n                                        >\r\n                                            SALE PRICE\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"grossMargin\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"grossMargin\"} \r\n                                            direction={valueToOrderBy === \"grossMargin\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"grossMargin\")}\r\n                                        >\r\n                                            GROSS MARGIN\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\">TABS / ACTIONS</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    sortedRowInformation(incorrectData, getComparator(orderDirection,valueToOrderBy)).map( (recipe,idx) => (\r\n                                        <StyledTableRow key={recipe.id} hover className={classes.tableRowHover} onClick={handleChange}>\r\n                                            <TableCell className=\"selectCheckbox\" padding=\"checkbox\">\r\n                                                <Checkbox\r\n                                                    ref = {ref => (liRefs[idx] = ref)}\r\n                                                    onClick = {handleChange}\r\n                                                    color=\"primary\"\r\n                                                    inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                                    className = \"heyCheckbox\"\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\">{recipe.name}</TableCell>\r\n                                            <TableCell align=\"left\">{moment(recipe.last_updated.date).format(\"MMM Do,YYYY\")}</TableCell>\r\n                                            <TableCell align=\"right\">{recipe.cogs}</TableCell>\r\n                                            <TableCell align=\"right\">{Math.round(recipe.cost_price)}</TableCell>\r\n                                            <TableCell align=\"right\">{Math.round(recipe.sale_price)}</TableCell>\r\n                                            <TableCell align=\"right\">{Math.round(recipe.gross_margin)}</TableCell>\r\n                                            <TableCell align=\"left\" display=\"flex\"  flexDirection=\"row\"><Chip label=\"Indian\" className=\"mr-2\"  style={{backgroundColor:\"#f4f4d0\"}} /><Chip label=\"Italian\"  style={{backgroundColor:\"#f8f4ab\"}}/></TableCell>\r\n                                        </StyledTableRow>\r\n                                    ))\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    ) : null)\r\n                }\r\n        </>\r\n\r\n    )\r\n}\r\n","C:\\Users\\pk\\Desktop\\interview_practice\\eagleowl\\src\\Components\\NothingToDisplay.js",[],"C:\\Users\\pk\\Desktop\\interview_practice\\eagleowl\\src\\Components\\IsUntagged.js",["68","69","70","71","72","73"],"import React, {useState, useEffect, useRef} from 'react'\r\nimport NothingToDisplay from './NothingToDisplay'\r\nimport { Checkbox, withStyles, makeStyles, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper , TableSortLabel} from '@material-ui/core'\r\nimport Chip from '@material-ui/core/Chip';\r\nimport moment from 'moment'\r\n\r\nconst useStyles = makeStyles(theme => (\r\n    {\r\n            headingColor : {\r\n                backgroundColor :'#94b3f6',\r\n            },\r\n            tableRowHover: {\r\n                \"&:hover\": {\r\n                        backgroundColor: \"#dad9df !important\",\r\n                    }\r\n            }\r\n    }));\r\n\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      '&:nth-of-type(odd)': {\r\n        backgroundColor: '#f4f3f9',\r\n      },\r\n    },\r\n  }))(TableRow);\r\n\r\n\r\nexport default function IsUntagged() {\r\n\r\n    const classes = useStyles()\r\n    const [isChecked, setIsChecked] = useState()\r\n    const [isItemSelected , setIsItemSelected] = useState(false)\r\n    const [disabledData, setDisabledData] = useState([])\r\n    const liRefs = []\r\n    const [untaggedData, setUntaggedData] = useState([])\r\n    const isMounted = useRef(false)\r\n\r\n\r\n    async function getUntaggedRecipes(){\r\n        try{\r\n            const data = await fetch('https://beta.eagleowl.in/api/v1/mock/organization/18/outlet/18/recipe/recipes/?page=1&is_untagged=true')\r\n            const json = await data.json()\r\n            setUntaggedData(json.results)\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n        \r\n    }\r\n    \r\n    useEffect(()=>{\r\n        getUntaggedRecipes()\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        if(isMounted.current){\r\n            console.log(untaggedData)\r\n        }\r\n        else{\r\n            isMounted.current = true\r\n        }\r\n    },[untaggedData])\r\n\r\n\r\n    \r\n    const handleChange = (e) => {\r\n        setIsItemSelected(e.target.checked);\r\n      };\r\n\r\n    const handleRowChange = (event) => {\r\n\r\n        setIsItemSelected(event.target.checked);\r\n        const check = event.target.checked\r\n\r\n            // for(var i=0; i<liRefs.length;i++){\r\n            //     liRefs[i].firstChild.firstChild.checked = true\r\n            // }\r\n    } \r\n\r\n    \r\n    const [orderDirection, setOrderDirection] = useState('asc')\r\n    const [valueToOrderBy, setValueToOrderBy] = useState('name')\r\n\r\n\r\n    function descendingComparator(a,b, orderBy){\r\n        if(b[orderBy] < a[orderBy]){\r\n            return -1;\r\n        }\r\n        if(b[orderBy] > a[orderBy]){\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getComparator(order,orderBy){\r\n        return order === 'desc'\r\n        ? (a,b) => descendingComparator(a,b, orderBy)\r\n        : (a,b) => -descendingComparator(a,b, orderBy);\r\n    }\r\n    \r\n    const handleRequestSort = (event,property) => {\r\n        const isAscending = valueToOrderBy === property && orderDirection === \"asc\";\r\n        setValueToOrderBy(property);\r\n        setOrderDirection(isAscending ? 'desc' : 'asc');\r\n    }\r\n\r\n    const createSortHandler = (property) => (event) => {\r\n        handleRequestSort(event,property);\r\n    }\r\n\r\n    const sortedRowInformation = (rowArray, comparator) => {\r\n        const stabalizedRowArray = rowArray.map((el,index) => [el,index]);\r\n        stabalizedRowArray.sort((a,b) => {\r\n            const order = comparator(a[0], b[0]);\r\n            if(order !== 0) return order;\r\n            return a[1] - b[1];\r\n        })\r\n        return stabalizedRowArray.map((el) => el[0]);\r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n            {\r\n                (isMounted.current ? ( untaggedData.length === 0 ? <NothingToDisplay /> :\r\n                    <TableContainer className=\"rounded-0\" component = {Paper}>\r\n                        <Table aria-label = \"disabled-recipes\">\r\n                            <TableHead>\r\n                                <TableRow className = {classes.headingColor}>\r\n                                    <TableCell className=\"selectCheckbox\" padding=\"checkbox\">\r\n                                    <Checkbox\r\n                                        onChange={handleRowChange}\r\n                                        color=\"primary\"\r\n                                        inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                    />\r\n                                    </TableCell>\r\n                                    <TableCell key=\"name\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"name\"}\r\n                                            direction={valueToOrderBy === \"name\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"name\")}\r\n                                        >\r\n                                            NAME\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"lastUpdated\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"lastUpdated\"}\r\n                                            direction={valueToOrderBy === \"lastUpdated\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"lastUpdated\")}\r\n                                        >\r\n                                            LAST UPDATED\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"cogs\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"cogs\"} \r\n                                            direction={valueToOrderBy === \"cogs\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"cogs\")}\r\n                                        >\r\n                                            COGS\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"costPrice\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"costPrice\"} \r\n                                            direction={valueToOrderBy === \"costPrice\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"costPrice\")}\r\n                                        >\r\n                                            COST PRICE\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"salePrice\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"salePrice\"} \r\n                                            direction={valueToOrderBy === \"salePrice\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"salePrice\")}\r\n                                        >\r\n                                            SALE PRICE\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"grossMargin\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"grossMargin\"} \r\n                                            direction={valueToOrderBy === \"grossMargin\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"grossMargin\")}\r\n                                        >\r\n                                            GROSS MARGIN\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\">TABS / ACTIONS</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    sortedRowInformation(untaggedData, getComparator(orderDirection,valueToOrderBy)).map( (recipe,idx) => (\r\n                                        <StyledTableRow key={recipe.id} hover className={classes.tableRowHover} onClick={handleChange}>\r\n                                            <TableCell className=\"selectCheckbox\" padding=\"checkbox\">\r\n                                                <Checkbox\r\n                                                    ref = {ref => (liRefs[idx] = ref)}\r\n                                                    onClick = {handleChange}\r\n                                                    color=\"primary\"\r\n                                                    inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                                    className = \"heyCheckbox\"\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\">{recipe.name}</TableCell>\r\n                                            <TableCell align=\"left\">{moment(recipe.last_updated.date).format(\"MMM Do,YYYY\")}</TableCell>\r\n                                            <TableCell align=\"right\">{recipe.cogs}</TableCell>\r\n                                            <TableCell align=\"right\">{Math.round(recipe.cost_price)}</TableCell>\r\n                                            <TableCell align=\"right\">{Math.round(recipe.sale_price)}</TableCell>\r\n                                            <TableCell align=\"right\">{Math.round(recipe.gross_margin)}</TableCell>\r\n                                            <TableCell  align=\"left\" display=\"flex\"  flexDirection=\"row\"><Chip label=\"Indian\" className=\"mr-2\"  style={{backgroundColor:\"#f4f4d0\"}} /><Chip label=\"Italian\"  style={{backgroundColor:\"#f8f4ab\"}}/></TableCell>\r\n                                        </StyledTableRow>\r\n                                    ))\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                   ) : null)\r\n                }\r\n        </>\r\n\r\n    )\r\n\r\n}\r\n","C:\\Users\\pk\\Desktop\\interview_practice\\eagleowl\\src\\Components\\IsDisabled.js",["74","75","76","77"],"import React, {useState, useEffect, useRef} from 'react'\r\nimport NothingToDisplay from './NothingToDisplay'\r\nimport { Checkbox, withStyles, makeStyles, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, TableSortLabel } from '@material-ui/core'\r\nimport Chip from '@material-ui/core/Chip';\r\nimport moment from 'moment'\r\n\r\nconst useStyles = makeStyles(theme => (\r\n    {\r\n            headingColor : {\r\n                backgroundColor :'#94b3f6',\r\n            },\r\n            tableRowHover: {\r\n                \"&:hover\": {\r\n                        backgroundColor: \"#dad9df !important\",\r\n                    }\r\n            }\r\n    }));\r\n\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      '&:nth-of-type(odd)': {\r\n        backgroundColor: '#f4f3f9',\r\n      },\r\n    },\r\n  }))(TableRow);\r\n\r\nexport default function IsDisabled() {\r\n\r\n    const classes = useStyles()\r\n    const [isChecked, setIsChecked] = useState()\r\n    const [isItemSelected , setIsItemSelected] = useState(false)\r\n    const [disabledData, setDisabledData] = useState([])\r\n    const isMounted = useRef(false)\r\n    const liRefs = []\r\n\r\n\r\n\r\n    async function getDisabledRecipes(){\r\n        try{\r\n            const data = await fetch('https://beta.eagleowl.in/api/v1/mock/organization/18/outlet/18/recipe/recipes/?page=1&is_disabled=true')\r\n            const json = await data.json()\r\n            setDisabledData(json.results)\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n        \r\n    }\r\n    \r\n    useEffect(()=>{\r\n        getDisabledRecipes()\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        if(isMounted.current){\r\n            console.log(disabledData)\r\n        }\r\n        else{\r\n            isMounted.current = true\r\n        }\r\n    },[disabledData])\r\n\r\n\r\n\r\n\r\n    const handleChange = (e) => {\r\n        setIsItemSelected(e.target.checked);\r\n      };\r\n\r\n    const handleRowChange = (event) => {\r\n\r\n        setIsItemSelected(event.target.checked);\r\n        const check = event.target.checked\r\n\r\n            // for(var i=0; i<liRefs.length;i++){\r\n            //     liRefs[i].firstChild.firstChild.checked = true\r\n            // }\r\n    }  \r\n\r\n    \r\n    const [orderDirection, setOrderDirection] = useState('asc')\r\n    const [valueToOrderBy, setValueToOrderBy] = useState('name')\r\n\r\n\r\n    function descendingComparator(a,b, orderBy){\r\n        if(b[orderBy] < a[orderBy]){\r\n            return -1;\r\n        }\r\n        if(b[orderBy] > a[orderBy]){\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getComparator(order,orderBy){\r\n        return order === 'desc'\r\n        ? (a,b) => descendingComparator(a,b, orderBy)\r\n        : (a,b) => -descendingComparator(a,b, orderBy);\r\n    }\r\n    \r\n    const handleRequestSort = (event,property) => {\r\n        const isAscending = valueToOrderBy === property && orderDirection === \"asc\";\r\n        setValueToOrderBy(property);\r\n        setOrderDirection(isAscending ? 'desc' : 'asc');\r\n    }\r\n\r\n    const createSortHandler = (property) => (event) => {\r\n        handleRequestSort(event,property);\r\n    }\r\n\r\n    const sortedRowInformation = (rowArray, comparator) => {\r\n        const stabalizedRowArray = rowArray.map((el,index) => [el,index]);\r\n        stabalizedRowArray.sort((a,b) => {\r\n            const order = comparator(a[0], b[0]);\r\n            if(order !== 0) return order;\r\n            return a[1] - b[1];\r\n        })\r\n        return stabalizedRowArray.map((el) => el[0]);\r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n            {\r\n                (isMounted.current ? ( disabledData.length === 0 ? <NothingToDisplay /> : \r\n                    <TableContainer className=\"rounded-0\" component = {Paper}>\r\n                        <Table aria-label = \"disabled-recipes\">\r\n                            <TableHead>\r\n                                <TableRow className = {classes.headingColor}>\r\n                                    <TableCell className=\"selectCheckbox\" padding=\"checkbox\">\r\n                                    <Checkbox\r\n                                        onChange={handleRowChange}\r\n                                        color=\"primary\"\r\n                                        inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                    />\r\n                                    </TableCell>\r\n                                    <TableCell key=\"name\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"name\"}\r\n                                            direction={valueToOrderBy === \"name\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"name\")}\r\n                                        >\r\n                                            NAME\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"lastUpdated\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"lastUpdated\"}\r\n                                            direction={valueToOrderBy === \"lastUpdated\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"lastUpdated\")}\r\n                                        >\r\n                                            LAST UPDATED\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"cogs\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"cogs\"} \r\n                                            direction={valueToOrderBy === \"cogs\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"cogs\")}\r\n                                        >\r\n                                            COGS\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"costPrice\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"costPrice\"} \r\n                                            direction={valueToOrderBy === \"costPrice\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"costPrice\")}\r\n                                        >\r\n                                            COST PRICE\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"salePrice\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"salePrice\"} \r\n                                            direction={valueToOrderBy === \"salePrice\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"salePrice\")}\r\n                                        >\r\n                                            SALE PRICE\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell key=\"grossMargin\" align=\"left\">\r\n                                        <TableSortLabel \r\n                                            active={valueToOrderBy === \"grossMargin\"} \r\n                                            direction={valueToOrderBy === \"grossMargin\" ? orderDirection: 'asc'}\r\n                                            onClick = {createSortHandler(\"grossMargin\")}\r\n                                        >\r\n                                            GROSS MARGIN\r\n                                        </TableSortLabel>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\">TABS / ACTIONS</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    sortedRowInformation(disabledData, getComparator(orderDirection,valueToOrderBy)).map( (recipe,idx) => (\r\n                                        <StyledTableRow key={recipe.id} hover className={classes.tableRowHover} onClick={handleChange}>\r\n                                            <TableCell className=\"selectCheckbox\" padding=\"checkbox\">\r\n                                                <Checkbox\r\n                                                    ref = {ref => (liRefs[idx] = ref)}\r\n                                                    onClick = {handleChange}\r\n                                                    color=\"primary\"\r\n                                                    inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                                    className = \"heyCheckbox\"\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\">{recipe.name}</TableCell>\r\n                                            <TableCell align=\"left\">{moment(recipe.last_updated.date).format(\"MMM Do,YYYY\")}</TableCell>\r\n                                            <TableCell align=\"right\">{recipe.cogs}</TableCell>\r\n                                            <TableCell align=\"right\">{Math.round(recipe.cost_price)}</TableCell>\r\n                                            <TableCell align=\"right\">{Math.round(recipe.sale_price)}</TableCell>\r\n                                            <TableCell align=\"right\">{Math.round(recipe.gross_margin)}</TableCell>\r\n                                            <TableCell align=\"left\" display=\"flex\"  flexDirection=\"row\"><Chip label=\"Indian\" className=\"mr-2\"  style={{backgroundColor:\"#f4f4d0\"}} /><Chip label=\"Italian\"  style={{backgroundColor:\"#f8f4ab\"}}/></TableCell>\r\n                                        </StyledTableRow>\r\n                                    ))\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                ) : null)\r\n            }\r\n        </>\r\n\r\n    )\r\n\r\n\r\n}\r\n","C:\\Users\\pk\\Desktop\\interview_practice\\eagleowl\\src\\Components\\HighMarginRecipes.js",[],"C:\\Users\\pk\\Desktop\\interview_practice\\eagleowl\\src\\Components\\LowMarginRecipes.js",["78"],"import React, {useState, useEffect, useRef} from 'react'\r\nimport NothingToDisplay from './NothingToDisplay'\r\nimport { ChartDonutUtilization,ChartThemeColor } from '@patternfly/react-charts'\r\nimport \"./lowmargin.css\"\r\n\r\nexport default function LowMarginRecipes() {\r\n\r\n\r\n    const [lowMarginData, setLowMarginData] = useState([])\r\n    const isMounted = useRef(false)\r\n\r\n\r\n    async function getLowMarginRecipes(){\r\n        try{\r\n            const data = await fetch('https://beta.eagleowl.in/api/v1/mock/organization/18/outlet/18/recipe/margin-group/?order=bottom')\r\n            const json = await data.json()\r\n            setLowMarginData(json.results)\r\n        }\r\n        catch(err){\r\n            console.log(err)\r\n        }\r\n        \r\n    }\r\n    \r\n    useEffect(()=>{\r\n        getLowMarginRecipes()\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        if(isMounted.current){\r\n            console.log(lowMarginData)\r\n        }\r\n        else{\r\n            isMounted.current = true\r\n        }\r\n    },[lowMarginData])\r\n\r\n    return(\r\n        <>\r\n            {\r\n                (isMounted.current ? ( lowMarginData.length === 0 ? <NothingToDisplay /> : lowMarginData.map( (data,idx) => {\r\n                    return(\r\n                        <div key={idx} style={{ height: '100%'}} className=\"d-flex flex-column\" id=\"lowmargin\">\r\n                            <p className=\"m-1\" style={{fontSize:13,color:\"#83888b\",height:40,width:135,fontFamily: 'Roboto',fontWeight:'500'}}>{data.name}</p>\r\n                            <ChartDonutUtilization\r\n                            height={160}\r\n                            ariaDesc=\"low margin data\"\r\n                            ariaTitle=\"low margin data\"\r\n                            constrainToVisibleArea={true}\r\n                            data={{ x: 'margin', y: data.margin }}\r\n                            labels={({ datum }) => datum.x ? `${datum.x}: ${datum.y}%` : null}\r\n                            title={data.margin}\r\n                            />\r\n                        </div>\r\n                        ) \r\n                    })) : null)\r\n            }\r\n        </>\r\n\r\n    )\r\n\r\n}\r\n","C:\\Users\\pk\\Desktop\\interview_practice\\eagleowl\\src\\Components\\TopFluctuatingRecipes.js",[],"C:\\Users\\pk\\Desktop\\interview_practice\\eagleowl\\src\\Components\\Loading.js",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":19,"column":12,"nodeType":"85","messageId":"86","endLine":19,"endColumn":15},{"ruleId":"83","severity":1,"message":"87","line":19,"column":17,"nodeType":"85","messageId":"86","endLine":19,"endColumn":23},{"ruleId":"83","severity":1,"message":"88","line":38,"column":12,"nodeType":"85","messageId":"86","endLine":38,"endColumn":21},{"ruleId":"83","severity":1,"message":"89","line":38,"column":23,"nodeType":"85","messageId":"86","endLine":38,"endColumn":35},{"ruleId":"83","severity":1,"message":"90","line":39,"column":12,"nodeType":"85","messageId":"86","endLine":39,"endColumn":26},{"ruleId":"83","severity":1,"message":"91","line":40,"column":12,"nodeType":"85","messageId":"86","endLine":40,"endColumn":24},{"ruleId":"83","severity":1,"message":"92","line":40,"column":26,"nodeType":"85","messageId":"86","endLine":40,"endColumn":41},{"ruleId":"83","severity":1,"message":"88","line":32,"column":12,"nodeType":"85","messageId":"86","endLine":32,"endColumn":21},{"ruleId":"83","severity":1,"message":"89","line":32,"column":23,"nodeType":"85","messageId":"86","endLine":32,"endColumn":35},{"ruleId":"83","severity":1,"message":"90","line":33,"column":12,"nodeType":"85","messageId":"86","endLine":33,"endColumn":26},{"ruleId":"83","severity":1,"message":"91","line":34,"column":12,"nodeType":"85","messageId":"86","endLine":34,"endColumn":24},{"ruleId":"83","severity":1,"message":"92","line":34,"column":26,"nodeType":"85","messageId":"86","endLine":34,"endColumn":41},{"ruleId":"83","severity":1,"message":"93","line":75,"column":15,"nodeType":"85","messageId":"86","endLine":75,"endColumn":20},{"ruleId":"83","severity":1,"message":"88","line":32,"column":12,"nodeType":"85","messageId":"86","endLine":32,"endColumn":21},{"ruleId":"83","severity":1,"message":"89","line":32,"column":23,"nodeType":"85","messageId":"86","endLine":32,"endColumn":35},{"ruleId":"83","severity":1,"message":"90","line":33,"column":12,"nodeType":"85","messageId":"86","endLine":33,"endColumn":26},{"ruleId":"83","severity":1,"message":"91","line":34,"column":12,"nodeType":"85","messageId":"86","endLine":34,"endColumn":24},{"ruleId":"83","severity":1,"message":"92","line":34,"column":26,"nodeType":"85","messageId":"86","endLine":34,"endColumn":41},{"ruleId":"83","severity":1,"message":"93","line":74,"column":15,"nodeType":"85","messageId":"86","endLine":74,"endColumn":20},{"ruleId":"83","severity":1,"message":"88","line":31,"column":12,"nodeType":"85","messageId":"86","endLine":31,"endColumn":21},{"ruleId":"83","severity":1,"message":"89","line":31,"column":23,"nodeType":"85","messageId":"86","endLine":31,"endColumn":35},{"ruleId":"83","severity":1,"message":"90","line":32,"column":12,"nodeType":"85","messageId":"86","endLine":32,"endColumn":26},{"ruleId":"83","severity":1,"message":"93","line":74,"column":15,"nodeType":"85","messageId":"86","endLine":74,"endColumn":20},{"ruleId":"83","severity":1,"message":"94","line":3,"column":32,"nodeType":"85","messageId":"86","endLine":3,"endColumn":47},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'key' is assigned a value but never used.","Identifier","unusedVar","'setKey' is assigned a value but never used.","'isChecked' is assigned a value but never used.","'setIsChecked' is assigned a value but never used.","'isItemSelected' is assigned a value but never used.","'disabledData' is assigned a value but never used.","'setDisabledData' is assigned a value but never used.","'check' is assigned a value but never used.","'ChartThemeColor' is defined but never used.","no-global-assign","no-unsafe-negation"]